<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>niliushall</title>
  
  
  <link href="https://www.wangliang.ml/atom.xml" rel="self"/>
  
  <link href="https://www.wangliang.ml/"/>
  <updated>2023-04-06T13:23:17.804Z</updated>
  <id>https://www.wangliang.ml/</id>
  
  <author>
    <name>niliushall</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python日志库logging</title>
    <link href="https://www.wangliang.ml/2023/03/30/python/Python%E6%97%A5%E5%BF%97%E5%BA%93logging/"/>
    <id>https://www.wangliang.ml/2023/03/30/python/Python%E6%97%A5%E5%BF%97%E5%BA%93logging/</id>
    <published>2023-03-30T07:33:05.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-logging日志库"><a href="#1-logging日志库" class="headerlink" title="1. logging日志库"></a>1. logging日志库</h1><p>参考：</p><p><a href="https://docs.python.org/3/howto/logging.html">logging官方文档</a></p><p><a href="https://www.jianshu.com/p/feb86c06c4f4">python logging模块使用教程 - 简书</a></p><p><a href="https://zhuanlan.zhihu.com/p/360306588">python日志：logging模块使用 - 知乎</a></p><h2 id="1-1-日志类型"><a href="#1-1-日志类型" class="headerlink" title="1.1 日志类型"></a>1.1 日志类型</h2><table><thead><tr><th>Level</th><th>When it’s used</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td>Detailed information, typically of interest only when diagnosing problems.</td></tr><tr><td><code>INFO</code></td><td>Confirmation that things are working as expected.</td></tr><tr><td><code>WARNING</code></td><td>An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.</td></tr><tr><td><code>ERROR</code></td><td>Due to a more serious problem, the software has not been able to perform some function.</td></tr><tr><td><code>CRITICAL</code></td><td>A serious error, indicating that the program itself may be unable to continue running.</td></tr></tbody></table><h2 id="1-2-修改日志格式"><a href="#1-2-修改日志格式" class="headerlink" title="1.2 修改日志格式"></a>1.2 修改日志格式</h2><p>函数格式：<code>logging.basicConfig(filename=&#39;&#39;, filemode=&#39;&#39;, format=&#39;&#39;, datefmt=&#39;&#39;, level=&#39;&#39;)</code></p><p>使用<code>logging.basicConfig(format=&#39;&#39;)</code>，通过修改<code>format</code>参数指定日志输出格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(levelname)s:%(message)s&#x27;</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%m/%d/%Y %I:%M:%S %p&#x27;</span>)  <span class="comment"># asctime表示详细日期</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>basicConfig</code>参数信息：</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>创建一个FileHandler，使用指定的文件名，而不是使用StreamHandler。</td></tr><tr><td>filemode</td><td>如果指明了文件名，指明打开文件的模式（如果没有指明filemode，默认为’a’）。</td></tr><tr><td>format</td><td>handler使用指明的格式化字符串。</td></tr><tr><td>datefmt</td><td>使用指明的日期／时间格式。</td></tr><tr><td>level</td><td>指明根logger的级别。</td></tr><tr><td>stream</td><td>使用指明的流来初始化StreamHandler。该参数与’filename’不兼容，如果两个都有，’stream’被忽略。</td></tr></tbody></table><p>format格式：</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名称</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程id</td></tr><tr><td>%(threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr></tbody></table><h2 id="1-3-logging的高级应用"><a href="#1-3-logging的高级应用" class="headerlink" title="1.3 logging的高级应用"></a>1.3 logging的高级应用</h2><p>logging采用模块化设计，包含四种组件：<strong>Loggers记录器</strong>、<strong>Handlers处理器</strong>、<strong>Formatters格式化器</strong>、<strong>Filters过滤器</strong>。</p><h3 id="1-3-1-Loggers记录器"><a href="#1-3-1-Loggers记录器" class="headerlink" title="1.3.1 Loggers记录器"></a>1.3.1 Loggers记录器</h3><p>给应用程序提供可记录日志的接口。</p><h4 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1. 调用接口"></a>1. 调用接口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logger属于单例模式，即__name__相同，则获取的logger相同</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><h4 id="2-设置日志级别"><a href="#2-设置日志级别" class="headerlink" title="2. 设置日志级别"></a>2. 设置日志级别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.setLevel()</span><br></pre></td></tr></table></figure><h4 id="3-与处理器的联用"><a href="#3-与处理器的联用" class="headerlink" title="3. 与处理器的联用"></a>3. 与处理器的联用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.addHandler()</span><br><span class="line">logger.removeHandler()</span><br></pre></td></tr></table></figure><h3 id="1-3-2-Handlers处理器"><a href="#1-3-2-Handlers处理器" class="headerlink" title="1.3.2 Handlers处理器"></a>1.3.2 Handlers处理器</h3><p>常见的处理器</p><ul><li>StreamHandler：屏幕输出<ul><li><code>sh = logging.StreamHandler(stream=None)</code></li></ul></li><li>FileHandler：文件记录<ul><li><code>fh = logging.FileHandler(filename, mode=&#39;a&#39;, encoding=None, delay=False)</code></li></ul></li><li>BaseRotatingHandler：标准的分割文件日志</li><li>RotatingFileHandler：按文件大小记录日志</li><li>TimeRotatingFileHandler：按时间记录日志</li></ul><p><code>fh.setFormatter(formatter1)</code>：给处理器<code>sh</code>设置日志格式，<code>formatter1</code>表示格式化器的实例</p><h3 id="1-3-3-Formatters格式化器"><a href="#1-3-3-Formatters格式化器" class="headerlink" title="1.3.3 Formatters格式化器"></a>1.3.3 Formatters格式化器</h3><p>调用接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formatter = logging.Formatter(fmt=<span class="literal">None</span>, datefmt=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>fmt表示日志格式，datefmt表示日期格式</p><h3 id="1-3-4-Filters过滤器"><a href="#1-3-4-Filters过滤器" class="headerlink" title="1.3.4 Filters过滤器"></a>1.3.4 Filters过滤器</h3><p>调用接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span> = logging.Filter(name=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-5-logging示例代码"><a href="#1-3-5-logging示例代码" class="headerlink" title="1.3.5 logging示例代码"></a>1.3.5 logging示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(filename)s %(levelname)s %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%a %d %b %Y %H:%M:%S&#x27;</span>,</span><br><span class="line">                    filename=<span class="string">&#x27;my.log&#x27;</span>,</span><br><span class="line">                    filemode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">&#x27;This is a info.&#x27;</span>)</span><br><span class="line">logging.debug(<span class="string">&#x27;This is a debug message.&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;This is a warning.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#记录器</span></span><br><span class="line">logger1 = logging.getLogger(<span class="string">&quot;logger1&quot;</span>)</span><br><span class="line">logger1.setLevel(logging.DEBUG)</span><br><span class="line"><span class="built_in">print</span>(logger1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(logger1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#处理器</span></span><br><span class="line"><span class="comment">#1.标准输出</span></span><br><span class="line">sh1 = logging.StreamHandler()</span><br><span class="line">sh1.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.文件输出</span></span><br><span class="line"><span class="comment"># 没有设置输出级别，将用logger1的输出级别(并且输出级别在设置的时候级别不能比Logger的低!!!)，设置了就使用自己的输出级别</span></span><br><span class="line">fh1 = logging.FileHandler(filename=<span class="string">&quot;fh.log&quot;</span>,mode=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">fh1.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式器</span></span><br><span class="line">fmt1 = logging.Formatter(fmt=<span class="string">&quot;%(asctime)s - %(levelname)-9s - %(filename)-8s : %(lineno)s line - %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt2 = logging.Formatter(fmt=<span class="string">&quot;%(asctime)s - %(name)s - %(levelname)-9s - %(filename)-8s : %(lineno)s line - %(message)s&quot;</span></span><br><span class="line">                        ,datefmt=<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给处理器设置格式</span></span><br><span class="line">sh1.setFormatter(fmt1)</span><br><span class="line">fh1.setFormatter(fmt2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#记录器设置处理器</span></span><br><span class="line">logger1.addHandler(sh1)</span><br><span class="line">logger1.addHandler(fh1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印日志代码</span></span><br><span class="line">logger1.debug(<span class="string">&quot;This is  DEBUG of logger1 !!&quot;</span>)</span><br><span class="line">logger1.info(<span class="string">&quot;This is  INFO of logger1 !!&quot;</span>)</span><br><span class="line">logger1.warning(<span class="string">&quot;This is  WARNING of logger1 !!&quot;</span>)</span><br><span class="line">logger1.error(<span class="string">&quot;This is  ERROR of logger1 !!&quot;</span>)</span><br><span class="line">logger1.critical(<span class="string">&quot;This is  CRITICAL of logger1 !!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于处理器设置了两个，所以控制台和日志文件都会有输出。</p>]]></content>
    
    
    <summary type="html">Python日志库logging的使用</summary>
    
    
    
    <category term="Python" scheme="https://www.wangliang.ml/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.wangliang.ml/tags/Python/"/>
    
    <category term="logging" scheme="https://www.wangliang.ml/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>左程云算法课笔记</title>
    <link href="https://www.wangliang.ml/2023/03/30/%E7%AE%97%E6%B3%95/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.wangliang.ml/2023/03/30/%E7%AE%97%E6%B3%95/%E5%B7%A6%E7%A8%8B%E4%BA%91%E7%AE%97%E6%B3%95%E8%AF%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-30T07:30:49.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识复杂度和简单排序算法"><a href="#认识复杂度和简单排序算法" class="headerlink" title="认识复杂度和简单排序算法"></a>认识复杂度和简单排序算法</h2><ul><li><p>异或运算</p><p>无进位的二进制加法</p><p>$<code>N \bigoplus 0 = N, N \bigoplus N = 0</code>$</p></li></ul><h3 id="排序算法实现"><a href="#排序算法实现" class="headerlink" title="排序算法实现"></a>排序算法实现</h3><h4 id="简单选择排序算法"><a href="#简单选择排序算法" class="headerlink" title="简单选择排序算法"></a>简单选择排序算法</h4><hr><h2 id="认识O-NlogN-的排序"><a href="#认识O-NlogN-的排序" class="headerlink" title="认识O(NlogN)的排序"></a>认识O(NlogN)的排序</h2><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul><li><p>小和问题</p><p><strong>问题描述：</strong></p><p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。</p><p><strong>题解：</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 小和问题</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 将小和问题转化为找某数字 num 右侧有多少更大的数字，num 对应的小和就是 num * cnt。</span></span><br><span class="line"><span class="comment"> * 在归并排序的基础上，合并数组时查找右侧比左侧大的数字个数，当前left对应数字的小和为 (right - j + 1) * nums[j]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">smallSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span> || len == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(nums, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算左侧数组、右侧数组和合并时产生的小和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">process</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);     <span class="comment">// 要有括号，否则因为运算符优先级问题会出错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(nums, left, mid) + <span class="built_in">process</span>(nums, mid + <span class="number">1</span>, right) + <span class="built_in">merge</span>(nums, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并数组，并计算小和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">        <span class="type">int</span> i = left, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> small_sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right) &#123;            </span><br><span class="line">                small_sum += nums[i] &lt; nums[j] ? (right - j + <span class="number">1</span>) * nums[i] : <span class="number">0</span>;</span><br><span class="line">                tmp.<span class="built_in">emplace_back</span>(nums[i] &lt; nums[j] ? nums[i++] : nums[j++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid) &#123;</span><br><span class="line">            tmp.<span class="built_in">emplace_back</span>(nums[i++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j &lt;= right) &#123;</span><br><span class="line">            tmp.<span class="built_in">emplace_back</span>(nums[j++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            nums[left++] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> small_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>逆序对问题</p><p><strong>问题描述：</strong></p><p>在一个数组中，左边的数如果比右边的数大，则这两个数构成一个逆序对，请打印所有逆序对。</p><p><strong>题解：</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">inversionPair</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">process</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(nums, left, mid) + <span class="built_in">process</span>(nums, mid + <span class="number">1</span>, right) + <span class="built_in">merge</span>(nums, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">        <span class="type">int</span> l = left, r = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l &lt;= mid &amp;&amp; r &lt;= right) &#123;</span><br><span class="line">            cnt += nums[l] &lt;= nums[r] ? <span class="number">0</span> : mid - l + <span class="number">1</span>;</span><br><span class="line">            tmp.<span class="built_in">emplace_back</span>(nums[l] &lt;= nums[r] ? nums[l++] : nums[r++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l &lt;= mid) &#123;</span><br><span class="line">            tmp.<span class="built_in">emplace_back</span>(nums[l++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(r &lt;= right) &#123;</span><br><span class="line">            tmp.<span class="built_in">emplace_back</span>(nums[r++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            nums[left++] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li><p>荷兰国旗问题</p><ul><li><p>第一种：K值有且仅有一个</p><p><strong>问题描述</strong></p><p>给定一个整数数组，给定一个值K（K只有一个），这个值在原数组中一定存在，要求把数组中<strong>小于等于</strong>K的元素放到数组的左边，大于K的元素放到数组的右边，最终返回一个整数数组。</p><p><strong>题解</strong></p><p>数组分为两个区域：<code>小于等于区</code>、<code>大于区</code></p><p>分两种情况：</p><ul><li><code>nums[i] ≤ target</code>：交换<code>nums[i]</code>与<code>小于等于区域的下一个数值</code>，小于等于区域右扩，i++</li><li><code>nums[i] &gt; target</code>：i++</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums， <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> left = <span class="number">-1</span>, right = len;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt;= target) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums[++left], nums[i++]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>- 第二种：K有多个  参考leetcode75题：75. 颜色分类  **问题描述**  给定一个整数数组，给定一个值K，这个值在原数组中一定存在且有多个，要求把数组中小于K的元素放到数组的左边，大于K的元素放到数组的右边，等于K的元素放到数组的中间，最终返回一个整数数组，其中只有两个值，分别是等于K的数组部分的左右两个下标值。    **题解**  数组分为三个区域：`小于区`、`等于区`、`大于区`  分三种情况：  - `nums[i] &lt; target`：交换`nums[i]`与`小于区的下一个数值`，小于区右扩，i++  - `nums[i] &gt; target`：交换`nums[i]`与`大于区的前一个数值`，大于区左括，i不变  - `nums[i] == target`：i++</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void sortNums(vector&lt;int&gt;&amp; nums， int target) &#123;</span><br><span class="line">    int len = nums.size();</span><br><span class="line">    int left = -1, right = len;</span><br><span class="line">    int i = 0;</span><br><span class="line">    </span><br><span class="line">    while(i &lt; right) &#123;</span><br><span class="line">        if(nums[i] &lt; target) &#123;</span><br><span class="line">            swap(nums[++left], nums[i++]);</span><br><span class="line">        &#125; else if(nums[i] &gt; target) &#123;</span><br><span class="line">            swap(nums[--right], nums[i]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>快排实现</p><ol start="912"><li>排序数组</li></ol><ul><li>方式一：将最后一个数字作为pivot，每次先从右向左找小于pivot的值，再从左向右找大于pivot的值，直至左右指针相遇</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void quickSort(vector&lt;int&gt;&amp; array, int left, int right) &#123;</span><br><span class="line">    if(array.size() == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if(left &lt; right) &#123;</span><br><span class="line">        int pivot = array[left];</span><br><span class="line">        int low = left, high = right;</span><br><span class="line">        while(low &lt; high) &#123;</span><br><span class="line">            while(array[high] &gt;= pivot &amp;&amp; low &lt; high) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[low] = array[high];</span><br><span class="line">            </span><br><span class="line">            while(array[low] &lt;= pivot &amp;&amp; low &lt; high) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            array[high] = array[low];</span><br><span class="line">        &#125;</span><br><span class="line">        array[low] = pivot;</span><br><span class="line">        </span><br><span class="line">        quickSort(array, left, low - 1);</span><br><span class="line">        quickSort(array, low + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>- 方式二：利用荷兰国旗问题的第二种方式，partition时将数据分为小于、等于、大于三部分</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;int&gt; partition(vector&lt;int&gt;&amp; nums, int L, int R) &#123;</span><br><span class="line">        // 将nums[R]作为基准值，即对nums[L...R-1]做partition</span><br><span class="line">        int less = L - 1, more = R;</span><br><span class="line">        while(L &lt; more) &#123;</span><br><span class="line">            if(nums[L] &lt; nums[R]) &#123;</span><br><span class="line">                swap(nums[L++], nums[++less]);</span><br><span class="line">            &#125; else if(nums[L] &gt; nums[R])&#123;</span><br><span class="line">                swap(nums[L], nums[--more]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                L++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums[more], nums[R]);</span><br><span class="line">        return vector&lt;int&gt;&#123;less + 1, more&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 随机选择一个数值作为基准值，并交换到最后一个位置</span><br><span class="line">    vector&lt;int&gt; randomized_partition(vector&lt;int&gt;&amp; nums, int L, int R) &#123;</span><br><span class="line">        int p = rand() % (R - L + 1) + L;</span><br><span class="line">        swap(nums[p], nums[R]);</span><br><span class="line">        return partition(nums, L, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void randomized_quicksort(vector&lt;int&gt;&amp; nums, int L, int R) &#123;</span><br><span class="line">        if(L &lt; R) &#123;</span><br><span class="line">            vector&lt;int&gt; equal_scope = randomized_partition(nums, L, R);</span><br><span class="line">            randomized_quicksort(nums, L, equal_scope[0] - 1);</span><br><span class="line">            randomized_quicksort(nums, equal_scope[1] + 1, R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        srand((int)time(NULL));</span><br><span class="line">        randomized_quicksort(nums, 0, nums.size() - 1);</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="堆排"><a href="#堆排" class="headerlink" title="堆排"></a>堆排</h3><ol start="912"><li>排序数组</li></ol><ul><li><p>基础代码</p><p>堆排代码：堆排</p></li><li><p>堆排扩展</p><p><strong>题目：</strong>已知一个<strong>几乎有序</strong>的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小。请选择一个合适的排序算法针对这个数据进行排序。</p><p><strong>题解：</strong>以<code>k+1</code>大小的窗口进行滑动，窗口内构造堆结构，每次将最值放到当前窗口的第一个位置，并先后滑动窗口。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sort_distance_less_k</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认大根堆，需设置比较器使其为小根堆</span></span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; <span class="built_in">min</span>((<span class="type">int</span>)nums.<span class="built_in">size</span>(), k); i++) &#123;</span><br><span class="line">            heap.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            heap.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            nums[start++] = heap.<span class="built_in">top</span>();</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            nums[start++] = heap.<span class="built_in">top</span>();</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h3 id="排序稳定性"><a href="#排序稳定性" class="headerlink" title="排序稳定性"></a>排序稳定性</h3><p>  不具备稳定性：选择排序，快速排序，堆排序</p><p>  具备稳定性：冒泡排序，插入排序，归并排序</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>排序</td><td>时间复杂度</td><td>空间复杂度</td><td>稳定性</td></tr><tr><td>选择</td><td>O(N2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>冒泡</td><td>O(N2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>插入</td><td>O(N2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>归并</td><td>O(N*logN)</td><td>O(N)</td><td>稳定</td></tr><tr><td>快排</td><td>O(N*logN)</td><td>O(logN)</td><td>不稳定</td></tr><tr><td>堆排</td><td>O(N*logN)</td><td>O(1)</td><td>不稳定</td></tr></tbody></table><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表中环的入口节点"><a href="#链表中环的入口节点" class="headerlink" title="链表中环的入口节点"></a>链表中环的入口节点</h3><h3 id="双链表的第一个公共节点"><a href="#双链表的第一个公共节点" class="headerlink" title="双链表的第一个公共节点"></a>双链表的第一个公共节点</h3><pre><code>160. 相交链表公共节点说明此后的节点为两个链表的公共部分，因为每个节点的next唯一且相同。并且由于next唯一，所以**有环则环必在链表尾部**。1. 判断是否有环，loop1表示链1的环入口节点，loop2表示链2的环入口节点。若没有环则为空。2. 根据环的有无进行分类：    - 都没有环        较长的链表指针走两个链表的长度差值步，两个链表指针同时后移，直至相同节点或节点为空。前者即第一个公共节点，后者即没有公共节点。    - 一个有环，一个无环        必然没有公共节点。    - 两个都有环        - `loop1 == loop2`，同一个环的入口节点：将`loop1`视作链表的终止，即转化为两个链表都没有环的操作        - `loop1 ≠ loop2`            - 某个入口节点在环上                遍历环，若找到另一个入口节点则为该情况，结果为`loop1`或`loop2`均可，否则表示不相交，没有公共节点            - 不相交                遍历环，没有另一个入口节点，则没有公共节点</code></pre><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>  二叉树的遍历算法</p><h2 id="二叉树的树的应用"><a href="#二叉树的树的应用" class="headerlink" title="二叉树的树的应用"></a>二叉树的树的应用</h2><h3 id="判断是否是BST"><a href="#判断是否是BST" class="headerlink" title="判断是否是BST"></a>判断是否是BST</h3><pre><code>用long避免测试样例为-2147483648时出错</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">long</span> <span class="variable">preValue</span> <span class="operator">=</span> LONG_MIN;</span><br><span class="line"></span><br><span class="line">    bool <span class="title function_">isValidBST</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == nullptr) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isValidBST(root-&gt;left)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt;= preValue)   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        preValue = root-&gt;val;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边界值（指针）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bool <span class="title function_">isValidBST</span><span class="params">(TreeNode* root, TreeNode* min, TreeNode* max)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(min &amp;&amp; root-&gt;val &lt;= min-&gt;val)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(max &amp;&amp; root-&gt;val &gt;= max-&gt;val)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root-&gt;left, min, root) &amp;&amp; isValidBST(root-&gt;right, root, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool <span class="title function_">isValidBST</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root, nullptr, nullptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边界值（long类型）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bool <span class="title function_">isValidBST</span><span class="params">(TreeNode* root, <span class="type">long</span> min, <span class="type">long</span> max)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt;= min || root-&gt;val &gt;= max)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root-&gt;left, min, root-&gt;val) &amp;&amp; isValidBST(root-&gt;right, root-&gt;val, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool <span class="title function_">isValidBST</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root, LONG_MIN, LONG_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bool <span class="title function_">isValidBST</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; S;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="variable">preValue</span> <span class="operator">=</span> LONG_MIN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!S.empty() || root) &#123;</span><br><span class="line">            <span class="keyword">while</span>(root) &#123;</span><br><span class="line">                S.push(root);</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            root = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;val &lt;= preValue) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            preValue = root-&gt;val;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="判断是否是完全二叉树"><a href="#判断是否是完全二叉树" class="headerlink" title="判断是否是完全二叉树"></a>判断是否是完全二叉树</h3><pre><code>层次遍历，标记左孩子是否出现空的情况</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">isCBT</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="type">static</span> boolean <span class="title">isCBT</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==null)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//利用队列来遍历二叉树</span></span><br><span class="line">        LinkedList&lt;Node&gt; queue = <span class="keyword">new</span> <span class="built_in">LinkedList</span>&lt;Node&gt;();</span><br><span class="line">        boolean flag =<span class="literal">false</span>;</span><br><span class="line">        Node l = null;</span><br><span class="line">        Node r = null;</span><br><span class="line">        queue.<span class="built_in">add</span>(head);</span><br><span class="line">        <span class="keyword">while</span>(!queue.<span class="built_in">isEmpty</span>())&#123;</span><br><span class="line">            head = queue.<span class="built_in">poll</span>();</span><br><span class="line">            l=head.left;</span><br><span class="line">            r=head.right;</span><br><span class="line">            <span class="keyword">if</span>(flag&amp;&amp;((l!=null||r!=null)||(l==null&amp;&amp;r!=null))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l!=null)&#123;</span><br><span class="line">                queue.<span class="built_in">add</span>(l);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(r!=null)&#123;</span><br><span class="line">                queue.<span class="built_in">add</span>(r);</span><br><span class="line">                <span class="keyword">if</span>(l == null||r==null)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否是满二叉树"><a href="#判断是否是满二叉树" class="headerlink" title="判断是否是满二叉树"></a>判断是否是满二叉树</h3><pre><code>![](https://secure2.wostatic.cn/static/s15HuSJudU7E5ejTZmBFQD/image.png)</code></pre><h3 id="判断是否是平衡二叉树"><a href="#判断是否是平衡二叉树" class="headerlink" title="判断是否是平衡二叉树"></a>判断是否是平衡二叉树</h3><h3 id="两个节点的最低公共祖先节点"><a href="#两个节点的最低公共祖先节点" class="headerlink" title="两个节点的最低公共祖先节点"></a>两个节点的最低公共祖先节点</h3><pre><code>236. 二叉树的最近公共祖先限制：o1和o2一定属于树方法一：map+set首先遍历二叉树记录所有节点的父节点（记根节点的父节点为自身），再依次记录o1、o2的所有到根节点路径上的节点，比较两个集合，找到共同路径的最后一个节点。方法二：</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span> || root == p || root == q) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode * left = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode * right = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">nullptr</span> &amp;&amp; right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left != <span class="literal">nullptr</span> ? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="找到二叉树一个节点的后继节点"><a href="#找到二叉树一个节点的后继节点" class="headerlink" title="找到二叉树一个节点的后继节点"></a>找到二叉树一个节点的后继节点</h3><pre><code>分为两种情况：- node有右子树：后继节点为右子树的最左节点- node无右子树：后继节点为next，且当前子树为next的左子树，即要找到`x==x→parent→left`。（若当前节点为最后一个节点，则没有后继节点，也就是说该树不为任何节点的左子树，此时parent为空，即返回空）</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">getLeftMost</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(root-&gt;left) &#123;</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* root, TreeNode* p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span> || p == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getLeftMost</span>(p-&gt;right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode* parent = p-&gt;parent;</span><br><span class="line">            <span class="keyword">while</span> (parent != <span class="literal">nullptr</span> &amp;&amp; parent-&gt;left != p) &#123;</span><br><span class="line">                p = parent;</span><br><span class="line">                parent = p-&gt;parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="297-二叉树的序列化与反序列化"><a href="#297-二叉树的序列化与反序列化" class="headerlink" title="297. 二叉树的序列化与反序列化"></a>297. 二叉树的序列化与反序列化</h3><pre><code>递归实现![](https://secure2.wostatic.cn/static/9s8f2BVaLjYmDZXV1gHpHm/image.png)</code></pre><h3 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h3><pre><code>每次折纸，增加的折痕符合树形结构，且每个节点的左孩子为凹，右孩子为凸。结果为树的中序遍历顺序。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  node1((down))</span><br><span class="line">  node2-1((down))</span><br><span class="line">  node2-2((up))</span><br><span class="line">  node3-1((down))</span><br><span class="line">  node3-2((up))</span><br><span class="line">  node3-3((down))</span><br><span class="line">  node3-4((up))</span><br><span class="line">  </span><br><span class="line">  node1 --- node2-1</span><br><span class="line">  node1 --- node2-2</span><br><span class="line">  node2-1 --- node3-1</span><br><span class="line">  node2-1 --- node3-2</span><br><span class="line">  node2-2 --- node3-3</span><br><span class="line">  node2-2 --- node3-4</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FoldPaper</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(vector&lt;string&gt;&amp; res, <span class="type">int</span> n, string direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inOrder</span>(res, n - <span class="number">1</span>, <span class="string">&quot;down&quot;</span>);</span><br><span class="line">        res.<span class="built_in">emplace_back</span>(direction);</span><br><span class="line">        <span class="built_in">inOrder</span>(res, n - <span class="number">1</span>, <span class="string">&quot;up&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">foldPaper</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="built_in">inOrder</span>(res, n, <span class="string">&quot;down&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>  0：39：27</p><h3 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> in;     <span class="comment">// 入度</span></span><br><span class="line">    <span class="type">int</span> out;    <span class="comment">// 出度</span></span><br><span class="line">    vector&lt;Node&gt; nexts;</span><br><span class="line">    vector&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">        in = <span class="number">0</span>;</span><br><span class="line">        out = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    Node from;</span><br><span class="line">    Node to;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Edge</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> weight, Node from, Node to) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;weight = weight;</span><br><span class="line">        <span class="keyword">this</span>-&gt;from = from;</span><br><span class="line">        <span class="keyword">this</span>-&gt;to = to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, Node&gt; nodes;</span><br><span class="line">    set&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Graph</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="图建立代码"><a href="#图建立代码" class="headerlink" title="图建立代码"></a>图建立代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Graph <span class="title">createGraph</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span> </span>&#123;</span><br><span class="line">    Graph graph = <span class="built_in">Graph</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> from = matrix[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> to = matrix[i][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> weight = matrix[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!graph.nodes.<span class="built_in">count</span>(from)) &#123;</span><br><span class="line">            graph.nodes[from] = <span class="built_in">Node</span>(from);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!graph.nodes.<span class="built_in">count</span>(to)) &#123;</span><br><span class="line">            graph.nodes[to] = <span class="built_in">Node</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node fromNode = graph.nodes[from];</span><br><span class="line">        Node toNode = graph.nodes[to];</span><br><span class="line">        Edge newEdge = <span class="built_in">Edge</span>(weight, fromNode, toNode);</span><br><span class="line">        fromNode.nexts.<span class="built_in">emplace_back</span>(toNode);</span><br><span class="line">        fromNode.out++;</span><br><span class="line">        fromNode.edges.<span class="built_in">emplace_back</span>(newEdge);</span><br><span class="line">        toNode.in++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图的BFS"><a href="#图的BFS" class="headerlink" title="图的BFS"></a>图的BFS</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;Node&gt; <span class="title">BFS</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    vector&lt;Node&gt; res;</span><br><span class="line">    queue&lt;Node&gt; Q;</span><br><span class="line">    set&lt;Node&gt; S;</span><br><span class="line">    Q.<span class="built_in">push</span>(node);</span><br><span class="line">    S.<span class="built_in">insert</span>(node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node cur = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; cur.value &lt;&lt; endl;</span><br><span class="line">        res.<span class="built_in">emplace_back</span>(cur);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> next : cur.nexts) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!S.<span class="built_in">count</span>(next)) &#123;</span><br><span class="line">                Q.<span class="built_in">push</span>(next);</span><br><span class="line">                cout &lt;&lt; next.value &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; Q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">                S.<span class="built_in">insert</span>(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="图的DFS"><a href="#图的DFS" class="headerlink" title="图的DFS"></a>图的DFS</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;Node&gt; <span class="title">DFS</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    vector&lt;Node&gt; res;</span><br><span class="line">    stack&lt;Node&gt; S;</span><br><span class="line">    set&lt;Node&gt; visited;</span><br><span class="line">    S.<span class="built_in">push</span>(node);</span><br><span class="line">    visited.<span class="built_in">insert</span>(node);</span><br><span class="line">    res.<span class="built_in">emplace_back</span>(node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node cur = S.<span class="built_in">top</span>();</span><br><span class="line">        S.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> next : cur.nexts) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited.<span class="built_in">count</span>(next)) &#123;</span><br><span class="line">                S.<span class="built_in">push</span>(cur);</span><br><span class="line">                S.<span class="built_in">push</span>(next);</span><br><span class="line">                visited.<span class="built_in">insert</span>(next);</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(next);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;Node&gt; <span class="title">sortedTopology</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">    map&lt;Node, <span class="type">int</span>&gt; inMap;       <span class="comment">// 存储 Node 与 入度 的映射</span></span><br><span class="line">    queue&lt;Node&gt; zeroInQueue;    <span class="comment">// 入度为 0 的节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有节点，记录节点与入度的对应关系</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> node : graph.nodes) &#123;</span><br><span class="line">        Node cur = node.second;</span><br><span class="line">        inMap[cur] = cur.in;</span><br><span class="line">        <span class="keyword">if</span>(cur.in == <span class="number">0</span>) &#123;</span><br><span class="line">            zeroInQueue.<span class="built_in">push</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先选择入度为0的节点进行删除，再将该节点对应的nexts节点的入度减1，</span></span><br><span class="line">    <span class="comment">// 若出现入度为0的节点，则加到队列中</span></span><br><span class="line">    vector&lt;Node&gt; res;</span><br><span class="line">    <span class="keyword">while</span>(!zeroInQueue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node node = zeroInQueue.<span class="built_in">front</span>();</span><br><span class="line">        zeroInQueue.<span class="built_in">pop</span>();</span><br><span class="line">        res.<span class="built_in">emplace_back</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> next : node.nexts) &#123;</span><br><span class="line">            inMap[next]--;</span><br><span class="line">            <span class="keyword">if</span>(inMap[next] == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroInQueue.<span class="built_in">push</span>(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><pre><code>Kruskal算法和Prim算法#### Kruskal算法（加边法）  将边从小到大排序，依次选择最小的边，若添加边后不形成环则添加，否则不添加</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><pre><code>#### Prim算法（加点法）  ![](https://secure2.wostatic.cn/static/da7uCyvyB7wcDsLFW9dsC6/image.png)</code></pre><h3 id="最短路径-Dijkstra算法"><a href="#最短路径-Dijkstra算法" class="headerlink" title="最短路径-Dijkstra算法"></a>最短路径-Dijkstra算法</h3><pre><code>适用于权值为非负数的无向图每次从未选择节点中选择距离最近的节点，更新当前选中的节点到相邻节点的最短距离，并将该节点标记为已选择，重复上述操作。</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">getMinDistanceAndUnselectedNode</span><span class="params">(map&lt;Node, <span class="type">int</span>&gt; distanceMap, set&lt;Node&gt; selectedNodes)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> minDistance = INT_MAX;</span><br><span class="line">    Node minNode;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> node : distanceMap) &#123;</span><br><span class="line">        <span class="type">int</span> distance = node.second;</span><br><span class="line">        Node cur = node.first;</span><br><span class="line">        <span class="keyword">if</span>(distance &lt; minDistance &amp;&amp; !selectedNodes.<span class="built_in">count</span>(cur)) &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            minNode = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;minNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">map&lt;Node, <span class="type">int</span>&gt; <span class="title">dijkstra</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从head出发到每个节点的最小距离，若没在表中，表示head到该点的距离为正无穷</span></span><br><span class="line">    map&lt;Node, <span class="type">int</span>&gt; distanceMap;</span><br><span class="line">    distanceMap[head] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    set&lt;Node&gt; selectedNodes;</span><br><span class="line">    Node* minNodePointer = <span class="built_in">getMinDistanceAndUnselectedNode</span>(distanceMap, selectedNodes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(minNodePointer) &#123;</span><br><span class="line">        <span class="type">int</span> distance = distanceMap[*minNodePointer];</span><br><span class="line">        <span class="keyword">for</span>(Edge edge : (*minNodePointer).edges) &#123;</span><br><span class="line">            Node toNode = edge.to;</span><br><span class="line">            <span class="keyword">if</span>(!selectedNodes.<span class="built_in">count</span>(toNode)) &#123;</span><br><span class="line">                distanceMap[toNode] = distance + edge.weight;</span><br><span class="line">            &#125;</span><br><span class="line">            distanceMap[toNode] = <span class="built_in">min</span>(distanceMap[toNode], distance + edge.weight);</span><br><span class="line">        &#125;</span><br><span class="line">        selectedNodes.<span class="built_in">insert</span>(*minNodePointer);</span><br><span class="line">        minNodePointer = <span class="built_in">getMinDistanceAndUnselectedNode</span>(distanceMap, selectedNodes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distanceMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h3><pre><code>边表示对应字符串的字母，点为空，也可以增加信息，例如pass表示经过该点的字符串数，end表示以该点为结尾的字符串数。</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><pre><code>![](https://secure2.wostatic.cn/static/2YAPFnpAFJmWhG1UQGqnNY/image.png)</code></pre><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h3><h3 id="题3"><a href="#题3" class="headerlink" title="题3"></a>题3</h3><p>  <img src="https://secure2.wostatic.cn/static/eLYayr42acdTgSAaVdu5en/image.png"></p>]]></content>
    
    
    <summary type="html">左程云算法课笔记</summary>
    
    
    
    <category term="算法" scheme="https://www.wangliang.ml/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://www.wangliang.ml/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树遍历算法</title>
    <link href="https://www.wangliang.ml/2023/03/30/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/"/>
    <id>https://www.wangliang.ml/2023/03/30/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/</id>
    <published>2023-03-30T07:29:15.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stack&lt;TreeNode*&gt; S;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; preOrder;</span><br><span class="line">        TreeNode* p = root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() || p) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p) &#123;</span><br><span class="line">                preOrder.<span class="built_in">emplace_back</span>(p-&gt;val);</span><br><span class="line">                S.<span class="built_in">emplace</span>(p);</span><br><span class="line">                p = p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            p = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> preOrder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><h3 id="非递归-1"><a href="#非递归-1" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; inOrder;</span><br><span class="line">        TreeNode* p = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>() || p) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p) &#123;</span><br><span class="line">                stk.<span class="built_in">emplace</span>(p);</span><br><span class="line">                p = p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            p = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            inOrder.<span class="built_in">emplace_back</span>(p-&gt;val);</span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inOrder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><h3 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h3><h3 id="非递归-2"><a href="#非递归-2" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leetcode</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    stack&lt;TreeNode*&gt; stk;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; postOrder;</span><br><span class="line">    TreeNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>() || root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 向左至子树最左侧</span></span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            stk.<span class="built_in">emplace</span>(root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取子树最左侧的节点</span></span><br><span class="line">        root = stk.<span class="built_in">top</span>();</span><br><span class="line">        <span class="comment">// stk.pop();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查当前节点是否有右子树或右子树是否已访问</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right == <span class="literal">nullptr</span> || root-&gt;right == prev) &#123;</span><br><span class="line">            postOrder.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">            prev = root;</span><br><span class="line">            root = <span class="literal">nullptr</span>;</span><br><span class="line">            stk.<span class="built_in">pop</span>();    <span class="comment">// 确定右子树已访问后，栈顶元素出栈</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// stk.emplace(root);</span></span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> postOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>---</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左程云</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">( BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">InitStack</span>(S);</span><br><span class="line">  p=T;</span><br><span class="line">  r=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span>(p || !<span class="built_in">IsEmpty</span>(S))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (p)&#123;                                          <span class="comment">//走到最左边</span></span><br><span class="line">      <span class="built_in">push</span>(S,p);</span><br><span class="line">      p=p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">GetTop</span>(S,p);                      <span class="comment">//向右，取栈顶结点。</span></span><br><span class="line">      <span class="keyword">if</span> (p-&gt;rchild &amp;&amp; p-&gt;rchild!=r)    <span class="comment">//若右子树存在，且未被访问过</span></span><br><span class="line">      &#123;</span><br><span class="line">        p = p-&gt;rchild;              <span class="comment">//转向右</span></span><br><span class="line">        <span class="built_in">push</span>(S,p);                      <span class="comment">//压栈</span></span><br><span class="line">        p = p-&gt;lchild;              <span class="comment">//再走到最左</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;                       <span class="comment">//否则，弹出结点并访问</span></span><br><span class="line">        <span class="built_in">pop</span>(S,p);        <span class="comment">//将结点弹出</span></span><br><span class="line">        <span class="built_in">visit</span>(p-&gt;data);        <span class="comment">//访问该结点</span></span><br><span class="line">        r = p;                   <span class="comment">//记录最近访问过的结点</span></span><br><span class="line">        p = <span class="literal">NULL</span>;            <span class="comment">//结点访问完后，重置p指针</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二叉树的遍历算法，包含前序、中序、后序</summary>
    
    
    
    <category term="算法" scheme="https://www.wangliang.ml/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树的遍历" scheme="https://www.wangliang.ml/tags/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://www.wangliang.ml/2023/03/30/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://www.wangliang.ml/2023/03/30/%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2023-03-30T07:27:42.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>包括路径压缩与按秩合并</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        f.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        rank.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == f[x] ? x : (f[x] = <span class="built_in">find</span>(f[x]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数名不能用union，会与c++关键字冲突</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">find</span>(a), y = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(rank[x] &lt;= rank[y]) &#123;</span><br><span class="line">            f[x] = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f[y] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rank[x] == rank[y] &amp;&amp; x != y) &#123;</span><br><span class="line">            rank[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> roota = <span class="built_in">find</span>(a), rootb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">return</span> roota == rootb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f, rank;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ol start="399"><li><p>除法求值</p></li><li><p>由斜杠划分区域</p></li><li><p>飞地的数量</p></li><li><p>交换字符串中的元素</p></li><li><p>找到最小生成树里的关键边和伪关键边</p></li><li><p>保证图可完全遍历</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    
    <summary type="html">并查集实现代码，C++</summary>
    
    
    
    <category term="算法" scheme="https://www.wangliang.ml/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="并查集" scheme="https://www.wangliang.ml/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>操作系统基础</title>
    <link href="https://www.wangliang.ml/2023/03/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <id>https://www.wangliang.ml/2023/03/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</id>
    <published>2023-03-30T07:25:57.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>进程上下文：进程的当前运行状态，包括程序计数器、通用寄存器、浮点寄存器、状态寄存器、用户栈、内核数据结构（页表、进程表、文件表）等</p><p><strong>线程和进程的区别？</strong></p><ul><li><p>调度：线程是调度的基本单位（PC，状态码，通用寄存器，线程栈及栈指针）；进程是拥有资源的基本单位（打开文件，堆，静态区，代码段等）。</p></li><li><p>并发性：一个进程内多个线程可以并发（最好和CPU核数相等）；多个进程可以并发。</p></li><li><p>拥有资源：线程不拥有系统资源，但一个进程的多个线程可以共享隶属进程的资源；进程是拥有资源的独立单位。</p></li><li><p>系统开销：线程创建销毁只需要处理PC值，状态码，通用寄存器值，线程栈及栈指针即可；进程创建和销毁需要重新分配及销毁task_struct结构。</p></li><li><p><strong>子进程从父进程继承的内容</strong></p><ul><li>用户号UIDs和用户组号GIDs</li><li>环境Environment</li><li>堆栈</li><li>共享内存</li><li>打开文件的描述符</li><li>执行时关闭（Close-on-exec）标志</li><li>信号（Signal）控制设定</li><li>进程组号</li><li>当前工作目录</li><li>根目录</li><li>文件方式创建屏蔽字</li><li>资源限制</li><li>控制终端</li></ul></li><li><p><strong>子进程独有</strong></p><ul><li>进程号PID</li><li>不同的父进程号</li><li>自己的文件描述符和目录流的拷贝</li><li>子进程不继承父进程的进程正文（text），数据和其他锁定内存（memory locks）</li><li>不继承异步输入和输出</li></ul></li></ul><p>父进程和子进程拥有独立的地址空间和PID参数。</p><p>子进程从父进程继承了用户号和用户组号，用户信息，目录信息，环境（表），打开的文件描述符，堆栈，（共享）内存等。</p><p>经过fork()以后，父进程和子进程拥有相同内容的代码段、数据段和用户堆栈，就像父进程把自己克隆了一遍。事实上，父进程只复制了自己的PCB块。而代码段，数据段和用户堆栈内存空间并没有复制一份，而是与子进程共享。只有当子进程在运行中出现写操作时，才会产生中断，并为子进程分配内存空间。由于父进程的PCB和子进程的一样，所以在PCB中断中所记录的父进程占有的资源，也是与子进程共享使用的。这里的“共享”一词意味着“竞争”</p><h2 id="内存分布情况"><a href="#内存分布情况" class="headerlink" title="内存分布情况"></a>内存分布情况</h2><p>从低地址到高地址：</p><ul><li><strong>程序文件段</strong>，包括二进制可执行代码； </li><li><strong>已初始化数据段</strong>，包括静态常量； </li><li><strong>未初始化数据段</strong>，包括未初始化的静态变量； </li><li><strong>堆段</strong>，包括动态分配的内存，从低地址开始向上增长； </li><li><strong>文件映射段</strong>，包括动态库、共享内存等，从低地址开始向上增长（跟硬件和内核版本有关） </li><li>栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 8 MB。当然系统也提供了 参数，以便我们自定义大小；</li></ul><p><img src="https://secure2.wostatic.cn/static/spNGBTFJaA1atXL4W7AnH4/image.png?auth_key=1680161137-tWHku6cf3mbDkS5gASrB5S-0-1f27920e599c59e7838b174f4b5dbe26"></p><h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><ol><li><p><strong>先来先服务first-come first-serverd（FCFS）</strong></p></li><li><p><strong>短作业优先 shortest job first（SJF）</strong></p></li><li><p><strong>最短剩余时间优先 shortest remaining time next（SRTN）</strong></p><p> 短作业优先的抢占式版本，按剩余运行时间顺序进行调度。当新作业到达时，会与当前进程剩余时间进行比较，若新作业运行时间更短则挂起当前进程，运行新的进程，否则新进程等待。</p></li><li><p><strong>时间片轮转</strong></p></li><li><p><strong>优先级调度</strong></p><p> 为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级</p></li><li><p><strong>多级反馈队列</strong></p><p> 多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不 同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。</p><p> 每个队列优先权也不同，最上面的优先权最高。因此只有上 一个队列没有进程在排队，才能调度当前队列上的进程。</p><p> 可视为时间片轮转调度算法和优先级调度算法的结合。</p></li></ol><hr><h2 id="Linux进程间通信"><a href="#Linux进程间通信" class="headerlink" title="Linux进程间通信"></a>Linux进程间通信</h2><ul><li><strong>管道</strong><ul><li>无名管道（内存）</li><li>有名管道（FIFO文件）</li></ul></li><li><strong>共享内存</strong>：最快的IPC方式</li><li><strong>消息队列</strong>：消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点</li><li><strong>套接字</strong>：适用于不同机器间进程通信</li><li><strong>信号</strong></li><li><strong>信号量</strong>：是一个计数器</li></ul><hr><h2 id="分页式存储管理"><a href="#分页式存储管理" class="headerlink" title="分页式存储管理"></a>分页式存储管理</h2><p>Ref：<a href="https://zhuanlan.zhihu.com/p/37549063">深入理解操作系统之——分页式存储管理</a></p><p>逻辑地址分为<code>页号+ 页内偏移量</code>，两者的长度根据页大小确定，若页大小为4KB（2^12B），则前20位表示页号，后12位表示页内偏移量。若页大小为2KB，则前21位表示页号，后11位表示页内偏移。（相当于$<code>页号 = 逻辑地址 / 页大小</code>$）</p><p><img src="https://secure2.wostatic.cn/static/mMzoU8qy8QobadHhvvaFEg/image.png?auth_key=1680161137-4KEjjDm8cXJBQQavNGaTW-0-e634eb13d5c854768ac681821033f42d"></p><h3 id="逻辑地址到物理地址的变换过程"><a href="#逻辑地址到物理地址的变换过程" class="headerlink" title="逻辑地址到物理地址的变换过程"></a><strong>逻辑地址到物理地址的变换过程</strong></h3><ol><li>进程访问某个逻辑地址时，分页地址机构自动将逻辑地址分为页号和页内地址</li><li>页号大于页表长度，越界错误</li><li>页表项的地址 p &#x3D; 页表起始地址 F + 页号 P * 页表项大小 S，从而得到对应的物理块号 B</li><li>页和物理块的大小是一致的，所以 页内地址&#x3D;块内地址</li><li>然后 物理地址 &#x3D; 物理块号 B * 页大小 L + 页内地址</li><li>根据物理地址读取数据</li></ol><p><img src="https://secure2.wostatic.cn/static/4a13t7nHg5xNKUXQs23x7F/image.png?auth_key=1680161137-jiRM1zV5fwNM27Zah8zpBp-0-2375f5649c0c9e46d6ebd1d319ea6f6c"></p><blockquote><p><strong>例：</strong>某系统采用分<a href="https://link.zhihu.com/?target=http://www.tomorrow.wiki/tag/%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/">页式存储管理</a>，页大小为 2KB。已知进程 A 的逻辑地址空间为 4 个页，内存分配如下页表所示，求逻辑地址 4832 的物理地址。（所有数据都是十进制）</p></blockquote><p>  <img src="https://pic4.zhimg.com/80/v2-440c4bf91ca6cf1cd11879facc87896b_720w.jpg"></p><p>  <em>解：</em></p><p>  <em>2KB&#x3D;2048B</em></p><p>  <em>页号 P&#x3D;逻辑地址&#x2F;页大小&#x3D;4832&#x2F;2048&#x3D;2</em></p><p>  <em>页内地址 F&#x3D;逻辑地址%页大小&#x3D;4832%2048&#x3D;736</em></p><p>  <em>根据页表查得 2 号页对应着 25 号物理块</em></p><p>  <em>物理地址 A&#x3D;物理块号页大小 + 页内地址&#x3D;25</em>2048+736&#x3D;51936</p><h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>快表一般存放在 CPU 内部的高速缓冲存储器 Cache。</p><p>CPU 寻址时先到<strong>快表</strong>查询相应的页表项形成物理地址，如果查询不到，则到内存中查询，并将对应页表项<strong>调入到快表</strong>中。如果快表的存储空间已满，则需要通过算法找到一个暂时不再需要的页表项，将它换出内存。</p><h3 id="二级页表"><a href="#二级页表" class="headerlink" title="二级页表"></a>二级页表</h3><p>由于页表必须连续存放，并且需要常驻物理内存，当逻辑地址空间很大时，导致页表占用内存空间很大。</p><p>二级页表即是对页表本身采用分页式管理，对页表本身增加了一层页表管理。页的大小就是一个页表的大小，一个页表只能装在一个页中。</p><p>逻辑地址分成了三部分：<code>顶级页号、次级页号和页内地址</code>。</p><p><img src="https://secure2.wostatic.cn/static/gJRpPCfwhkqtsUJ6J1bdph/image.png?auth_key=1680161138-u6mH8JYAtXAVXHB8mkok1b-0-c200673aaf478281bbc2616ced117898"></p><hr><h2 id="分段式存储管理"><a href="#分段式存储管理" class="headerlink" title="分段式存储管理"></a>分段式存储管理</h2><p>主要方便用户和程序员，以满足方便编程、信息保护和共享、动态增长及动态链接等多方面的需要。</p><p><strong>分段逻辑地址结构</strong></p><p><img src="https://secure2.wostatic.cn/static/7u5dtyTHeX47bEJJNeiaFb/image.png?auth_key=1680161138-896agWczEr1vHEKns64ohH-0-a7cf78f5985781c98fd5a16a6554f0f5"></p><p><strong>段表结构</strong></p><p><img src="https://secure2.wostatic.cn/static/iPn376xXYykwFQWY6Wcw2Y/image.png?auth_key=1680161138-aEuC5p7VyMvs9K57BcRoTr-0-cf5a87a076aba51e5c4176ec368448cc"></p><p><strong>地址变换机构</strong></p><p><img src="https://secure2.wostatic.cn/static/owgpoi2Zee54SenoK6CRvK/image.png?auth_key=1680161138-iBrCbMZW7Kd8LcHmVummkQ-0-59d6cdc3e34909234a4a5454eb112e6a"></p><h3 id="逻辑地址到物理地址的变换过程-1"><a href="#逻辑地址到物理地址的变换过程-1" class="headerlink" title="逻辑地址到物理地址的变换过程"></a>逻辑地址到物理地址的变换过程</h3><p>① 从逻辑地址A中取出前几位为段号S，后几位为段内偏移量W。</p><p>② 比较段号S和段表长度M，若S≥M，则产生越界中断，否则继续执行。</p><p>③ 段表中段号S对应的段表项地址 &#x3D; 段表始址F + 段号S * 段表项长度，取出该段表项的前几位得到段长C。若段内偏移量≥C，则产生越界中断，否则继续执行。</p><p>④取出段表项中该段的始址b，计算$<code>E=b+W</code>$，用得到的物理地址E去访问内存。</p><hr><h2 id="段页式管理"><a href="#段页式管理" class="headerlink" title="段页式管理"></a>段页式管理</h2><p>在段页式系统中，作业的地址空间首先被分成若干<strong>逻辑段</strong>，每段都有自己的段号，然后将每段分成若干<strong>大小固定的页</strong>。对内存空间的管理仍然和分页存储管理一样，将其分成若干和页面大小相同的存储块，对内存的分配以存储块为单位。</p><p><strong>逻辑地址</strong>分为：段号、页号、页内偏移量</p><p><img src="https://secure2.wostatic.cn/static/hNtzEtaiHN5FbYWvvFkAXP/image.png?auth_key=1680161138-dFkNSn3ja9DMVauCyXrxG4-0-227c2fbe45b3c096cb2bd54d2b70fe7a"></p><p><strong>地址变换机构</strong></p><p><img src="https://secure2.wostatic.cn/static/mU7JEwqxBQkb5VG3rj2t5Y/image.png?auth_key=1680161139-3A2YuyLr5oTSsFpBHSZ1H1-0-5d8948a532a4c35bafc502a93b71569d"></p><hr><h2 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h2><ol><li><p><strong>首次适应</strong></p><p> 空闲分区以<strong>地址递增</strong>的次序排列。每次分配内存时顺序查找空闲分区链( 或空闲分区表)，找到大小能满足要求的第一个空闲分区。每次都从低地址开始查找，找到第一个能满足大小的空闲分区。</p></li><li><p><strong>最佳适应</strong></p><p> 空闲分区按<strong>容量递增</strong>次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。</p></li><li><p><strong>最坏适应</strong></p><p> 空闲分区按<strong>容量递减</strong>次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。（为了解决最佳适应算法的问题：产生太多难以利用的小碎片）</p></li><li><p><strong>邻近适应</strong></p><p> 空闲分区以<strong>地址递增</strong>的顺序排列(可排成一个循环链表)。每次分配内存时从<strong>上次查找结束的位置开始</strong>查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。</p><p> （首次适应算法每次都从链头开始查找的。这可能会导致<strong>低地址部分出现很多小的空闲分区</strong>，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。如果每次都从上次查找结束的位置开始检索，就能解决上述问题。）</p></li></ol><hr><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h4 id="操作系统进行内存管理时要做的事情？"><a href="#操作系统进行内存管理时要做的事情？" class="headerlink" title="操作系统进行内存管理时要做的事情？"></a>操作系统进行内存管理时要做的事情？</h4><ul><li>内存空间的分配与回收</li><li>从逻辑上对内存空间进行扩充</li><li>实现逻辑地址与物理地址的转换</li><li>内存保护，保证各进程在各自存储空间内运行，互不干扰</li></ul><hr><h2 id="操作系统经典问题"><a href="#操作系统经典问题" class="headerlink" title="操作系统经典问题"></a>操作系统经典问题</h2><h3 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h3><p>参考：<a href="https://blog.csdn.net/qq_35423154/article/details/109150852?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-109150852-blog-87941701.pc_relevant_multi_platform_whitelistv1&spm=1001.2101.3001.4242.2&utm_relevant_index=4">哲学家进餐问题的三种解决方法(C++11)</a></p><p>leetcode：<a href="https://leetcode.cn/problems/the-dining-philosophers/">1226. 哲学家进餐 - 力扣（LeetCode）</a></p><p>三种方法</p><ul><li>同时拿起左右两只叉子才可以进餐</li><li>限制进餐人数</li><li>奇数先左后右，偶数先右后左</li></ul><h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><h4 id="读写锁-x2F-共享锁"><a href="#读写锁-x2F-共享锁" class="headerlink" title="读写锁&#x2F;共享锁"></a>读写锁&#x2F;共享锁</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> *             读写锁 shared_mutex 的自定义，解决【读者-写者】问题</span></span><br><span class="line"><span class="comment"> * shared_mutex: 共享锁</span></span><br><span class="line"><span class="comment"> * shared_lock: 线程间可以同时使用</span></span><br><span class="line"><span class="comment"> * unique_lock: 线程独享</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Counter</span>(<span class="type">int</span> val = <span class="number">0</span>) : _value(val) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">shared_lock&lt;shared_mutex&gt; <span class="title">lock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> _value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;shared_mutex&gt; <span class="title">lock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line">        ++_value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;shared_mutex&gt; <span class="title">lock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line">        _value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> std::shared_mutex _mutex;</span><br><span class="line">    <span class="type">int</span> _value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mutex g_io_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_shared_mutex</span><span class="params">(Counter&amp; counter)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        counter.<span class="built_in">increase</span>();</span><br><span class="line">        <span class="type">int</span> val = counter.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(g_io_mutex)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&quot;: val = &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_shared_mutex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">2</span>;</span><br><span class="line">    vector&lt;thread&gt; threads;</span><br><span class="line">    <span class="function">Counter <span class="title">counter</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        threads.<span class="built_in">emplace_back</span>(&amp;worker_shared_mutex, <span class="built_in">ref</span>(counter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (thread&amp; t : threads) &#123;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h4><p><img src="https://secure2.wostatic.cn/static/xeMFUuYqxqXNGszCEEUNWy/image.png?auth_key=1680161139-eC7weQq6697CsjQyKe79AR-0-68161add9f741b9e1bb64ccc25310005"></p><h2 id="内存覆盖与内存交换"><a href="#内存覆盖与内存交换" class="headerlink" title="内存覆盖与内存交换"></a>内存覆盖与内存交换</h2><p>参考：<a href="https://blog.csdn.net/dongyanxia1000/article/details/51425141">内存覆盖和内存交换</a></p><hr><h2 id="守护进程、僵尸进程、孤儿进程"><a href="#守护进程、僵尸进程、孤儿进程" class="headerlink" title="守护进程、僵尸进程、孤儿进程"></a>守护进程、僵尸进程、孤儿进程</h2><h3 id="守护进程的创建"><a href="#守护进程的创建" class="headerlink" title="守护进程的创建"></a>守护进程的创建</h3><p>参考：<a href="https://blog.csdn.net/woxiaohahaa/article/details/53487602">守护进程(daemon)详解与创建</a></p><ol><li><p><code>fork()</code>创建子进程，父进程<code>exit()</code>退出</p><p> 守护进程是脱离终端控制的，在形式上做到子进程与控制终端的分离，让子进程在后台执行</p></li><li><p>子进程调用<code>setsid()</code>创建新的会话</p><p> 子进程会复制父进程的会话期、进程组、控制终端，因此子进程并没有真正独立出来，通过设置新的会话组可使得子进程成为无终端的会话组组长，从而真正独立</p></li><li><p>再次<code>fork()</code>一个子进程，并让父进程退出</p><p> 进程虽已成为无终端的会话组组长，但此时仍能重新申请控制终端，需要<code>fork()</code>一个子进程，该子进程不是会话首进程，因此不能打开控制终端</p></li><li><p>子进程执行<code>chdir()</code>，让根目录成为子进程的工作目录</p><p> 子进程会复制父进程的当前工作目录，使得当前目录所在的文件系统无法卸载，需要将工作目录修改至根目录<code>/</code></p></li><li><p>子进程调用<code>umask()</code>，设置进程的文件权限掩码为0</p><p> 子进程会复制父进程的文件掩码，使得没有文件的一些权限，因此需要将文件掩码设置为0</p></li><li><p>子进程关闭不需要的文件描述符</p><p> 子进程会复制父进程已打开的文件描述符，会导致文件系统无法卸载；且守护进程无法与控制终端通信，需要关闭0、1、2的文件描述符</p></li><li><p>守护进程退出</p><p> 通过kill关闭守护进程</p></li></ol><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><blockquote><p>参考：<a href="https://www.cnblogs.com/anker/p/3271773.html">https://www.cnblogs.com/anker/p/3271773.html</a></p></blockquote><p>子进程先退出，父进程未退出，子进程必须等到父进程捕获到子进程的退出状态才能真正结束，而如果父进程没有调用<code>wait()/waitpid()</code>获取子进程的状态信息，会导致子进程成为僵尸进程。由于僵尸进程仍保存一定信息（进程号，退出状态，运行时间等），会造成资源浪费。</p><p><strong>解决方法</strong>：</p><ol><li><strong>SIGCHILD信号处理</strong>：子进程退出时向父进程发送SIGCHILD信号，父进程处理SIGCHILD信号。在信号处理函数中调用wait&#x2F;waitpid处理僵尸进程。</li><li><strong>fork()两次</strong>：将子进程成为孤儿进程，从而其父进程变为init进程，通过init进程处理僵尸进程。</li></ol><h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><p>父进程先退出，子进程还未退出，子进程会被init进程接收，并由init对其进行状态收集工作</p><hr><h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><p>读写时间的影响因素：<strong>旋转时间、寻道时间、实际的数据传输时间</strong>。</p><p>寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p><ol><li><strong>先来先服务</strong></li><li><strong>最短寻道时间优先</strong>：优先调度与当前磁头所在磁道距离最近的磁道</li><li><strong>电梯扫描算法</strong>：总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向</li></ol><hr><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><ol><li><p><strong>最佳置换法（OPT）</strong></p><p> 每次选择淘汰的页面将是以后永不使用，或者在最长时间内不再被访问的页面</p></li><li><p><strong>先进先出置换算法（FIFO）</strong></p><p> 每次选择淘汰的页面是最早进入内存的页面，可能出现Belady 异常</p></li><li><p><strong>最近最久未使用置换算法（LRU）</strong></p><p> 每次淘汰的页面是最近最久未使用的页面</p></li><li><p><strong>时钟置换算法（CLOCK）&#x2F; 最近未用算法（Not Recently Used）</strong></p><p> 为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成一个循环队列。当某页被访问时，其访问位置为1。当需要淘汰一个页面时，只需检查页的访问位。如果是0，就选择该页换出；如果是1，则将它置为0，暂不换出，继续检查下一个页面，若第x轮扫描中所有页面都是1，则将这些页面的访问位依次置为0后，再进行第二轮扫描（第二轮扫描中一定会有访问位 为0的页面，因此简单的CLOCK算法选择–个淘汰页面最多会经过两轮扫描）</p></li><li><p><strong>改进的时钟置换算法</strong></p><p> 在CLOCK的基础上，优先淘汰没有修改过的页面，避免I&#x2F;O操作。</p></li></ol><hr><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><strong>死锁产生的必要条件</strong>（缺一不可）：</p><ol><li><strong>互斥条件</strong></li><li><strong>不可剥夺条件</strong></li><li><strong>请求和保持条件</strong></li><li><strong>循环等待条件</strong></li></ol><p><strong>死锁的处理方法</strong>：</p><ol><li><p><strong>鸵鸟策略</strong>：忽略死锁。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略</p></li><li><p><strong>死锁检测与死锁恢复</strong></p><p> 每种类型单个资源：检测有向图是否有环</p><p> 每种类型单个资源：</p><p> 死锁恢复：</p><ul><li>利用抢占恢复</li><li>利用回滚恢复</li><li>通过杀死进程恢复</li></ul></li><li><p><strong>死锁预防</strong></p><ul><li>破坏互斥条件</li><li>破坏不可剥夺条件</li><li>破坏请求和保持条件</li><li>破坏循环等待条件</li></ul></li><li><p><strong>死锁避免</strong></p><p> 银行家算法：<a href="https://blog.csdn.net/qq_33414271/article/details/80245715">银行家算法</a></p></li></ol><hr><h2 id="高并发的解决方案"><a href="#高并发的解决方案" class="headerlink" title="高并发的解决方案"></a>高并发的解决方案</h2><ol><li>应用数据与静态资源分离</li><li>客户端缓存</li><li>集群和分布式</li><li>反向代理</li></ol><hr><h2 id="在执行malloc申请内存的时候，操作系统是怎么做的？"><a href="#在执行malloc申请内存的时候，操作系统是怎么做的？" class="headerlink" title="在执行malloc申请内存的时候，操作系统是怎么做的？"></a>在执行malloc申请内存的时候，操作系统是怎么做的？</h2><p>从操作系统层面上看，malloc是通过两个系统调用来实现的： brk和mmap。</p><ul><li>brk是将进程数据段(.data)的最高地址指针向高处移动，这一步可以扩大进程在运行时的堆大小</li><li>mmap是在进程的虚拟地址空间中寻找一块空闲的虚拟内存，这一步可以获得一块可以操作的堆内 存。</li></ul><p>通常，分配的内存小于128k时，使用brk调用来获得虚拟内存，大于128k时就使用mmap来获得虚拟内 存。</p><hr><p><strong>交换空间</strong>是在物理硬盘上划分出的一部分空间，在物理内存满时将数据交换到交换空间，是<strong>虚拟内存</strong>使用的硬盘空间。</p><p><strong>抖动</strong>：刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，是频繁的页面调度行为。主要原因：进程频繁访问的页面数目高于可用的物理块数。</p><p><strong>原子操作的实现</strong></p><ul><li><strong>总线锁</strong>：一个处理器在总线上输出LOCK#信号，使得其他处理器对内存的操作请求都会被阻塞，该处理器独占共享内存</li><li><strong>缓存锁</strong>：缓存锁是某个CPU对缓存数据进行更改时，会通知缓存了该数据的CPU抛弃缓存的数据或者从内存重新读取</li></ul>]]></content>
    
    
    <summary type="html">操作系统相关基础知识</summary>
    
    
    
    <category term="操作系统" scheme="https://www.wangliang.ml/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://www.wangliang.ml/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>STL空间配置器</title>
    <link href="https://www.wangliang.ml/2023/03/30/c++/STL%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8/"/>
    <id>https://www.wangliang.ml/2023/03/30/c++/STL%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8/</id>
    <published>2023-03-30T07:23:42.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>考虑到小型区块可能造成的内存破碎问题，SGI 为此设计了双层级配置器。</p><ul><li>当配置区块超过 128bytes 时，称为足够大，使用第一级配置器<code>malloc_alloc_template</code>，直接使用 <code>malloc()</code> 和 <code>free()</code>。 </li><li>当配置区块不大于 128bytes 时，为了降低额外负担，直接使用第二级配置器<code>default_alloc_template</code>，采用复杂的 <code>memory pool</code> 处理方式。</li></ul><p><img src="https://secure2.wostatic.cn/static/kJ9aSyctWvLFAhgXLMune7/image.png?auth_key=1680160993-do9Zj1XDtsurq8YPJ5GeKq-0-ee940ef67ed3a7842e5ed096701f3383"></p><ol><li><p>维护16条链表，分别是0-15号链表，最小8字节，以8字节逐渐递增，最大128字节，传入一个字节参数，表示需要多大的内存，会自动校对到第几号链表（如需要13bytes空间，会分配 16bytes），在找到第n个链表后查看链表是否为空，如果不为空直接从对应的free_list中取出，将已经取出的指针向后移动一位。</p></li><li><p>若对应的free_list为空，先看其内存池是不是空时，如果内存池不为空： </p><p> （1）先检验它剩余空间是否够20个节点大小（即所需内存大小(提升后) * 20），若足够则直接从内存池 中拿出20个节点大小空间，将其中一个分配给用户使用，另外19个当作自由链表中的区块挂在相应的 free_list下，这样下次再有相同大小的内存需求时，可直接取出。 </p><p> （2）如果不够20个节点大小，则看它是否能满足1个节点大小，如果够的话则直接拿出一个分配给用 户，然后从剩余的空间中分配尽可能多的节点挂在相应的free_list中。</p><p> （3）如果连一个节点内存都不能满足的话，则将内存池中剩余的空间挂在相应的free_list中（找到相应 的free_list），然后再给内存池申请内存，转到3。</p></li><li><p>内存池为空，申请内存。此时二级空间配置器会使用malloc()从heap上申请内存，（一次所申请的内存大小为2 * 所需节点内存大小（提升后）* 20 + 一段额外空间），申请40块，一半拿来用，一半放内存池中。</p></li><li><p>malloc没有成功。在第三种情况下，如果malloc()失败了，说明heap上没有足够空间分配给我们了，这时，二级空间配置器会从比所需节点空间大的free_list中一一搜索，从比它所需节点空间大的free_list中取出一个节点来使用。如果这也没找到，说明比其大的free_list中都没有自由区块了，那就要调用一级适配器了。</p></li></ol><p>释放时调用deallocate()函数，若释放的n&gt;128，则调用一级空间配置器，否则就直接将内存块挂上自由链 表的合适位置。 </p><p>STL二级空间配置器虽然解决了外部碎片与提高了效率，但它同时增加了一些缺点： </p><ol><li>因为自由链表的管理问题，它会把我们需求的内存块自动提升为8的倍数，这时若你需要1个字节，它 会给你8个字节，即浪费了7个字节，所以它又引入了内部碎片的问题，若相似情况出现很多次，就会造 成很多内部碎片； </li><li>二级空间配置器是在堆上申请大块的狭义内存池，然后用自由链表管理，供现在使用，在程序执行过 程中，它将申请的内存一块一块都挂在自由链表上，即不会还给操作系统，并且它的实现中所有成员全是静态的，所以它申请的所有内存只有在进程结束才会释放内存，还给操作系统，由此带来的问题有： 1.即我不断的开辟小块内存，最后整个堆上的空间都被挂在自由链表上，若我想开辟大块内存就会失败；2.若自由链表上挂很多内存块没有被使用，当前进程又占着内存不释放，这时别的进程在堆上申请不到空间，也不可以使用当前进程的空闲内存，由此就会引发多种问题。</li></ol>]]></content>
    
    
    <summary type="html">STL空间配置器的底层实现原理</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    <category term="STL" scheme="https://www.wangliang.ml/categories/C/STL/"/>
    
    
    <category term="STL" scheme="https://www.wangliang.ml/tags/STL/"/>
    
    <category term="内存管理" scheme="https://www.wangliang.ml/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>malloc底层实现原理</title>
    <link href="https://www.wangliang.ml/2023/03/30/c++/malloc%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://www.wangliang.ml/2023/03/30/c++/malloc%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2023-03-30T07:22:00.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>Ref：<a href="https://www.cnblogs.com/dongzhiquan/p/5621906.html">linux环境内存分配原理</a></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>当开辟的空间小于 128K 时，调用 <code>brk()</code>函数，malloc 的底层实现是系统调用函数 <code>brk()</code>，其主要移动指针 <code>_enddata</code>（此时的 _enddata 指的是 Linux 地址空间中堆段的末尾地址，不是数据段的末尾地址）</li><li>当开辟的空间大于 128K 时，<code>mmap()</code>系统调用函数来在虚拟地址空间中（堆和栈中间，称为“文件映射区域”的地方）找一块空间来开辟。</li></ol><p>两种方式都是分配虚拟内存，没有分配物理内存。只有在第一次访问已分配的虚拟空间时，发生缺页中断，操作系统负责分配物理内存，并建立虚拟内存与物理内存的映射。</p><p>小于128K</p><p><img src="https://secure2.wostatic.cn/static/e25iQ75FYVWoKMme6jMvHN/image.png?auth_key=1680160902-jTbrYV28HQ28K3yNbjttZi-0-51b54a65e527526f0b2da8a32a831c54"></p><p>大于128K</p><p><img src="https://secure2.wostatic.cn/static/muu7NA6hVgLkKZtjyfV3kX/image.png?auth_key=1680160902-iUENp9t2AQKXnKcYSLFodd-0-682ed6f574465aeaccbf262e2420f5ef"></p><p>free空间</p><p><img src="https://secure2.wostatic.cn/static/gCzq5odEExaxJ8cGr5R4XC/image.png?auth_key=1680160902-j4uEYo5QZoCFkiRqkR4uHh-0-000be0d490c70538f726b1cfdd44fbf4"></p><ul><li>使用<code>brk()</code>分配的内存空间，只有在高地址内存释放以后才能释放。如图（7），B释放以后，由于<code>_edata</code>指针之前还有D存在，因此B无法被释放，其物理内存和虚拟内存均无法被释放，但可以被重用（新请求40K，便可以分配该内存块）</li><li>使用<code>mmap()</code>分配的内存空间，可以使用<code>munmap()</code>释放，且可以被单独释放</li><li>当最高地址空间的空闲内存超过128K（可由M_TRIM_THRESHOLD选项调节）时，执行内存紧缩操作（trim）</li></ul><h3 id="缺页中断"><a href="#缺页中断" class="headerlink" title="缺页中断"></a>缺页中断</h3><p>发生缺页中断时，进程进入内核态，执行以下操作：</p><ol><li>检查要访问的虚拟地址是否合法</li><li>查找&#x2F;分配一个物理页</li><li>填充物理页内容（读取磁盘、置0或不操作）</li><li>建立映射关系（虚拟地址到物理地址的映射）</li><li>重复执行发生缺页中断的指令</li></ol>]]></content>
    
    
    <summary type="html">malloc函数的底层实现原理</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    <category term="内存管理" scheme="https://www.wangliang.ml/categories/C/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="内存管理" scheme="https://www.wangliang.ml/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="malloc" scheme="https://www.wangliang.ml/tags/malloc/"/>
    
  </entry>
  
  <entry>
    <title>C++运算符重载</title>
    <link href="https://www.wangliang.ml/2023/03/30/c++/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://www.wangliang.ml/2023/03/30/c++/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2023-03-30T07:20:06.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="function-call"><a href="#function-call" class="headerlink" title="function call ()"></a>function call ()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LessThan</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> mycmp = [](<span class="type">const</span> <span class="type">int</span>&amp; a) &#123;<span class="keyword">return</span> a &lt; <span class="number">6</span>;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it1 = <span class="built_in">find_if</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), mycmp);</span><br><span class="line">    <span class="keyword">auto</span> it2 = <span class="built_in">find_if</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="built_in">LessThan</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *it1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *it2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iostream运算符（-lt-lt-、-gt-gt-）"><a href="#iostream运算符（-lt-lt-、-gt-gt-）" class="headerlink" title="iostream运算符（&lt;&lt;、&gt;&gt;）"></a>iostream运算符（&lt;&lt;、&gt;&gt;）</h3><p>类内实现需要使用友元函数，类外实现不能使用const</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 友元方式实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>, <span class="type">int</span> b = <span class="number">0</span>) : _a(a), _b(b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">geta</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> _a;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getb</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> _b;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> A&amp; t) &#123;</span><br><span class="line">        os &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; t._a &lt;&lt; <span class="string">&quot;, b = &quot;</span> &lt;&lt; t._b;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; os, A&amp; t) &#123;</span><br><span class="line">        os &gt;&gt; t._a &gt;&gt; t._b;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _a, _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外函数方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>, <span class="type">int</span> b = <span class="number">0</span>) : _a(a), _b(b) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">geta</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> _a;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getb</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> _b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _a, _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, A&amp; t) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; t.<span class="built_in">geta</span>() &lt;&lt; <span class="string">&quot;, b = &quot;</span> &lt;&lt; t.<span class="built_in">getb</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">介绍C++运算符重载，主要是输入输出运算符的重载</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    
    <category term="C++" scheme="https://www.wangliang.ml/tags/C/"/>
    
    <category term="重载" scheme="https://www.wangliang.ml/tags/%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>C++函数指针</title>
    <link href="https://www.wangliang.ml/2023/03/30/c++/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <id>https://www.wangliang.ml/2023/03/30/c++/C++%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</id>
    <published>2023-03-30T07:18:44.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>为方便调用具有相同格式（包括返回类型与参数列表）的函数，使用函数指针指向对应的函数，以调用该函数。</p><p>例如，目前有以下几个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">fun_a</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function">string <span class="title">fun_b</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function">string <span class="title">fun_c</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>为方便调用以上函数，需要定义函数指针，其类型需要指明函数的返回值与参数列表，如下：</p><p><code>string (*func_pointer)(int)</code>，表示返回值类型为<code>string</code>，参数列表为<code>（int）</code>，该指针的名称为<code>func_pointer</code>，类型为<code>string (*)(int)</code>。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>将函数地址复制给函数指针即可，例如：</p><p>赋值：<code>func_pointer = fun_a;</code>，调用：<code>func_pointer(num);</code></p><hr><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><p>为方便循环调用以上函数，需要用到<code>函数指针数组</code>，如：<code>string (*func_pointer[])(int)</code>，即在函数指针的类型上添加<code>[]</code>表示数组。</p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> (*funcs[])(<span class="type">int</span>) = &#123;fun_a, fun_b, fun_c&#125;;</span><br></pre></td></tr></table></figure><p>其中，<code>funcs</code>表示数组名称，数组中保存的是<code>函数地址</code>，而函数名代表的就是函数地址，因此可用函数名进行初始化。</p><p>为方便使用函数指针数组，可用<code>enum</code>将函数名作为下标（默认从0开始）。</p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ns_type</span> &#123;</span><br><span class="line">    ns_fun_a, ns_fun_b, ns_fun_c</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">fun_a</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func_a &quot;</span> + <span class="built_in">to_string</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">fun_b</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func_b &quot;</span> + <span class="built_in">to_string</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">fun_c</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;func_c &quot;</span> + <span class="built_in">to_string</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> (*funcs[])(<span class="type">int</span>) = &#123;fun_a, fun_b, fun_c&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> (*p_func)(<span class="type">int</span>) = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">// p_func = fun_a;             // ok</span></span><br><span class="line">    <span class="comment">// p_func = funcs[ns_fun_b];   // ok</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> func : funcs) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">func</span>(x);</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p>Essential C++，p60-p62</p>]]></content>
    
    
    <summary type="html">C++函数指针的使用</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    
    <category term="C++" scheme="https://www.wangliang.ml/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://www.wangliang.ml/2023/03/30/c++/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.wangliang.ml/2023/03/30/c++/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-03-30T07:16:48.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<ol><li>不加锁实现线程安全<ul><li><p><strong>atomic</strong></p></li><li><p><strong>threadlocal</strong>：每个线程的对象共享数据，不同线程相互隔离，相当于线程内的static变量；threadlocal变量与线程绑定，和线程具有相同的生命周期，且只有第一次声明时被赋值。作用域仍然与普通变量相同。</p><p>  Ref：<a href="https://zhuanlan.zhihu.com/p/340201634">C++11 thread_local用法</a>、<a href="https://zhuanlan.zhihu.com/p/77585472">C++ 11 关键字：thread_local</a></p></li><li><p><strong>CAS</strong>：CAS操作包含三个操作数——内存位置（V）、预期原值（A）、新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。</p></li></ul></li></ol><p>无论哪种情况，它都会在CAS指令之前返回该位置的值。<br>CAS有效地说明了“我认为位置V应该包含值A；如果包含该值，则将B放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可”。</p><pre><code>    Ref：[锁机制及CAS实现原理(C++) ](https://zhuanlan.zhihu.com/p/400817892)    </code></pre><p>无锁数据结构</p><p>  <a href="https://zhuanlan.zhihu.com/p/352723264">迈向多线程——解析无锁队列的原理与实现</a></p><h2 id="几种典型的锁"><a href="#几种典型的锁" class="headerlink" title="几种典型的锁"></a>几种典型的锁</h2><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>5.2 互斥量</p><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>5.3 条件变量</p><h3 id="共享锁-x2F-读写锁"><a href="#共享锁-x2F-读写锁" class="headerlink" title="共享锁&#x2F;读写锁"></a>共享锁&#x2F;读写锁</h3><p>读者写者问题</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><blockquote><p>参考：<a href="https://blog.csdn.net/feikudai8460/article/details/107035480">C++11：原子交换函数compare_exchange_weak和compare_exchange_strong</a></p></blockquote><p>c++中CAS的实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">atomic</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare_exchange_weak</span><span class="params">( T&amp; expected, T desired,</span></span></span><br><span class="line"><span class="params"><span class="function">                            std::memory_order order =</span></span></span><br><span class="line"><span class="params"><span class="function">                                std::memory_order_seq_cst )</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare_exchange_strong</span><span class="params">( T&amp; expected, T desired,</span></span></span><br><span class="line"><span class="params"><span class="function">                              std::memory_order order =</span></span></span><br><span class="line"><span class="params"><span class="function">                                  std::memory_order_seq_cst )</span></span>;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>weak版和strong版的区别：</strong>weak版本的CAS允许偶然出乎意料的返回（比如在字段值和期待值一样的时候却返回了false），不过在一些循环算法中，这是可以接受的。通常它比起strong有更高的性能。</p><p><strong>自旋锁的实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 自旋锁，使用 CAS 与 原子量atomic 实现</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpinLock</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SpinLock</span>() : <span class="built_in">flag_</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> expect = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!flag_.<span class="built_in">compare_exchange_weak</span>(expect, <span class="literal">true</span>)) &#123;</span><br><span class="line">            expect = <span class="literal">false</span>; <span class="comment">// 重置expect，否则会因为当前值与expect导致expect自动被赋值为flag_值（true）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag_.<span class="built_in">store</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    atomic&lt;<span class="type">bool</span>&gt; flag_; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> kIncNum = <span class="number">10000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> kWorkerNum = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> sum_spinlock = <span class="number">0</span>;</span><br><span class="line">SpinLock spinlock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_spinlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kIncNum; i++) &#123;</span><br><span class="line">        spinlock.<span class="built_in">lock</span>();</span><br><span class="line">        sum_spinlock++;</span><br><span class="line">        spinlock.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_spinlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;thread&gt; threads;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kWorkerNum; i++) &#123;</span><br><span class="line">        threads.<span class="built_in">emplace_back</span>(worker_spinlock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kWorkerNum; i++) &#123;</span><br><span class="line">        threads[i].<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum_spinlock = &quot;</span> &lt;&lt; sum_spinlock &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录 C++ 相关的多线程基础知识。</summary>
    
    
    
    <category term="多线程" scheme="https://www.wangliang.ml/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://www.wangliang.ml/tags/C/"/>
    
    <category term="多线程" scheme="https://www.wangliang.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>《深入应用C++11》第6章 chrono、数字与字符串的转换</title>
    <link href="https://www.wangliang.ml/2023/03/29/c++/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC6%E7%AB%A0-chrono%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://www.wangliang.ml/2023/03/29/c++/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC6%E7%AB%A0-chrono%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-03-29T03:56:06.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-1-chrono"><a href="#6-1-chrono" class="headerlink" title="6.1 chrono"></a>6.1 chrono</h2><h3 id="6-1-1-记录时长的duration"><a href="#6-1-1-记录时长的duration" class="headerlink" title="6.1.1 记录时长的duration"></a>6.1.1 记录时长的duration</h3><p>表示一段时间间隔，<code>duration&lt;Rep, ratio&lt;cnt, time_unit&gt;&gt;</code></p><ul><li>第一个参数表示时钟数类型</li><li>第二个参数表示每个时钟周期的秒数，如<code>typedef duration&lt;Rep, ratio&lt;60, 1&gt;&gt; seconds;</code></li></ul><p>包括chrono::hours、minutes、seconds、milliseconds、microseconds、nanoseconds</p><p>获取时间间隔：<code>count()</code>，返回值类型<code>int64_t</code>；且duration支持时间间隔的运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">chrono::minutes <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">chrono::seconds <span class="title">t2</span><span class="params">(<span class="number">60</span>)</span></span>;</span><br><span class="line">chrono::seconds t3 = t1 - t2;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;t3.count() = &quot;</span> &lt;&lt; t3.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>可以使用<code>duration_cast()</code>将当前的时钟周期转换为其他的时钟周期，再使用<code>count()</code>获取转换后的时间间隔。如将seconds转换为minutes。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">chrono::seconds <span class="title">t1</span><span class="params">(<span class="number">150</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; chrono::<span class="built_in">duration_cast</span>&lt;chrono::minutes&gt;(t1).<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;minutes&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>timer实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Timer</span>() : <span class="built_in">time_begin_</span>(chrono::high_resolution_clock::<span class="built_in">now</span>()) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123; time_begin_ = chrono::high_resolution_clock::<span class="built_in">now</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Duration = chrono::milliseconds&gt;</span><br><span class="line">    <span class="type">int64_t</span> <span class="built_in">elapsed</span>() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chrono::<span class="built_in">duration_cast</span>&lt;Duration&gt;(</span><br><span class="line">                   chrono::high_resolution_clock::<span class="built_in">now</span>() - time_begin_)</span><br><span class="line">            .<span class="built_in">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int64_t</span> <span class="title">elapsed_micro</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">elapsed</span>&lt;chrono::microseconds&gt;(chrono::high_resolution_clock::<span class="built_in">now</span>() - time_begin_).<span class="built_in">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int64_t</span> <span class="title">elapsed_seconds</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">elapsed</span>&lt;chrono::seconds&gt;(chrono::high_resolution_clock::<span class="built_in">now</span>() - time_begin_).<span class="built_in">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    chrono::time_point&lt;chrono::high_resolution_clock&gt; time_begin_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Timer t;    <span class="comment">// 开始计时</span></span><br><span class="line">    <span class="keyword">auto</span> f = []()&#123;<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) <span class="type">int</span> x = <span class="number">1</span>+<span class="number">2</span>;&#125;;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;time = &quot;</span> &lt;&lt; t.<span class="built_in">elapsed_micro</span>() &lt;&lt; endl;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-数字与字符串的转换"><a href="#6-2-数字与字符串的转换" class="headerlink" title="6.2 数字与字符串的转换"></a>6.2 数字与字符串的转换</h2><ul><li>to_string</li><li>atoi</li><li>atoil</li><li>atoll</li><li>atof</li></ul>]]></content>
    
    
    <summary type="html">本文为《深入应用C++11》第6章 chrono、数字与字符串的转换 内容的学习笔记。</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    <category term="深入应用C++11" scheme="https://www.wangliang.ml/categories/C/%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
    
    <category term="C++" scheme="https://www.wangliang.ml/tags/C/"/>
    
    <category term="C++11" scheme="https://www.wangliang.ml/tags/C-11/"/>
    
    <category term="深入应用C++11" scheme="https://www.wangliang.ml/tags/%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
  </entry>
  
  <entry>
    <title>《深入应用C++11》第5章 多线程</title>
    <link href="https://www.wangliang.ml/2023/03/29/c++/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC5%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.wangliang.ml/2023/03/29/c++/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC5%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-03-29T03:50:38.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="5-1-线程"><a href="#5-1-线程" class="headerlink" title="5.1 线程"></a>5.1 线程</h2><ol><li>线程创建<ul><li>直接创建：<code>thread t(worker);</code></li><li>使用移动语义：<code>thread t2(move(t));</code>，线程被<code>move</code>之后，对象<code>t</code>不再代表任何线程</li><li>使用bind：<code>thread t3(bind(worker, 1, 2));</code></li><li>lambda表达式：<code>thread t4([](int a, doubnle b)&#123;&#125;, 1, 2);</code></li></ul></li><li>等待线程结束：<code>t.join();</code></li><li>分离线程：<code>t.detach();</code>，后台执行，但是与主线程失去联系</li></ol><p>对每个线程必须进行join或detach，保证线程对象生命周期到主调函数结束之后仍然存在。</p><p><strong>线程基本用法</strong></p><ul><li>获取线程ID：<code>t.get_id();</code></li><li>获取CPU核数：<code>thread::hardware_concurrency();</code></li><li>线程休眠：<code>this_thread::sleep_for(chrono::seconds(3));</code></li></ul><p><strong>Ref</strong></p><p>thread基础：C++ 并发编程（一）：创建线程 - SegmentFault 思否：有一个系列</p><hr><h2 id="5-2-互斥量"><a href="#5-2-互斥量" class="headerlink" title="5.2 互斥量"></a>5.2 互斥量</h2><p>保护多线程同时访问的共享数据</p><p><strong>4种锁</strong></p><ul><li><code>mutex</code>：独占，不能递归使用</li><li><code>timed_mutex</code>：带超时的独占锁，设置超时等待时间，在超时后可以做其他事，使用while循环获取互斥量</li><li><code>recursive_mutex</code>：可递归使用，不带超时</li><li><code>recursive_timed_mutex</code>：带超时的递归锁</li></ul><p><strong>使用锁的方法</strong></p><ul><li><code>lock()</code>, <code>unlock()</code>：手动加锁解锁，<code>t.lock();</code> <code>t.unlock();</code></li><li><code>lock_guard&lt;&gt;</code>：析构时自动解锁，<code>lock_guard&lt;mutex&gt; lock(my_mutex);</code></li><li><code>unique_lock&lt;&gt;</code>：可手动解锁，析构时检查是否解锁并自动解锁，<code>unique_lock&lt;mutex&gt; lock(my_mutex);</code>；手动解锁：<code>lock.unlock();</code>；可配合<code>condition_variable</code>使用</li></ul><p>timed_mutex比mutex多了两个接口：<code>try_lock_for()</code>和<code>try_lock_until()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 带超时的互斥量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">timed_mutex g_timed_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_timed_mutex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">timeout</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g_timed_mutex.<span class="built_in">try_lock_for</span>(timeout)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;获得锁&quot;</span> &lt;&lt; endl;</span><br><span class="line">            g_timed_mutex.<span class="built_in">unlock</span>();     <span class="comment">// 由于已经获得锁并加锁，需要在此处解锁</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;未获得锁，处理其他事情&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-条件变量"><a href="#5-3-条件变量" class="headerlink" title="5.3 条件变量"></a>5.3 条件变量</h2><p>要配合<code>condition_variable</code>使用，必须使用<code>unique_lock</code>，而不能使用lock_guard，且unique_lock支持手动unlock，避免在整个函数期间占用资源</p><p>流程：首先对mutex加锁，若没有获得mutex的访问权限，则解锁，同时<code>wait()</code>阻塞直至等待的信号发生，再获取mutex的访问权限；最后调用<code>notify_one</code>或<code>notify_all</code>唤醒其他线程</p><p><strong>两种条件变量</strong></p><ul><li><code>condition_variable</code>：配合unique_lock<mutex>进行<code>wait()</code>操作</li><li><code>condition_variable_any</code>：和任意具有lock、unlock语义的mutex搭配使用，效率比condition_variable差</li></ul><p><strong>两种调用方式</strong></p><ul><li>循环中调用wait</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">condition_variable cv;</span><br><span class="line">mutex g_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_locK&lt;mutex&gt; <span class="title">lock</span><span class="params">(g_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>( 等待条件 ) &#123;</span><br><span class="line">        cv.<span class="built_in">wait</span>(lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>wait第二个参数使用lambda表达式，第二个参数相当于循环调用等待条件，返回false则wait函数会阻塞等待至被唤醒</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">condition_variable cv;</span><br><span class="line">mutex g_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_locK&lt;mutex&gt; <span class="title">lock</span><span class="params">(g_mutex)</span></span>;</span><br><span class="line">    cv.<span class="built_in">wait</span>(lock, []()&#123;<span class="keyword">return</span> 等待条件;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用while循环等待的原因：线程可能因为超时或虚假唤醒，造成假醒，此时应继续阻塞等待</p><p><strong>代码 - 同步队列</strong></p><ul><li>c++代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> *                                 同步队列</span></span><br><span class="line"><span class="comment"> * 使用 mutex 与 condition_variable 实现</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">SyncQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_full</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> queue_.<span class="built_in">size</span>() == max_size_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !queue_.<span class="built_in">size</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SyncQueue</span>(<span class="type">int</span> size = <span class="number">0</span>) : <span class="built_in">max_size_</span>(size) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        cv_notfull_.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>]() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;缓冲区已满，需要等待&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">this</span>-&gt;<span class="built_in">is_full</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        queue_.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">        cv_notempty_.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">take</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        cv_notempty_.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>]()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;缓冲区空了，需要等待&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">this</span>-&gt;<span class="built_in">is_empty</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        x = queue_.<span class="built_in">front</span>();</span><br><span class="line">        queue_.<span class="built_in">pop_front</span>();</span><br><span class="line">        cv_notfull_.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        queue_.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> queue_.<span class="built_in">size</span>() == max_size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">get_size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> queue_.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;T&gt; queue_;                  <span class="comment">// 缓冲区</span></span><br><span class="line">    mutex mutex_;                    <span class="comment">// 结合条件变量使用</span></span><br><span class="line">    condition_variable cv_notempty_; <span class="comment">// 非空的条件变量</span></span><br><span class="line">    condition_variable cv_notfull_;  <span class="comment">// 非满的条件变量</span></span><br><span class="line">    <span class="type">int</span> max_size_;                   <span class="comment">// 队列的最大长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-原子变量"><a href="#5-4-原子变量" class="headerlink" title="5.4 原子变量"></a>5.4 原子变量</h2><p>使用<code>atomic&lt;T&gt;</code>定义</p><p>原子变量定义的数据无需使用mutex限制线程间的互斥访问</p><p>原子变量示例 - 原子计数器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AtomicCounter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123; ++value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123; --value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value.<span class="built_in">load</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    atomic&lt;<span class="type">int</span>&gt; value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-5-call-once-x2F-once-flag"><a href="#5-5-call-once-x2F-once-flag" class="headerlink" title="5.5 call_once &#x2F; once_flag"></a>5.5 call_once &#x2F; once_flag</h2><p><code>call_once</code>可以保证函数在多线程环境下仅被调用一次。使用<code>call_once</code>时需要一个<code>once_flag</code>作为<code>call_once</code>的参数。</p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> *                                 call_once / once_flag</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">once_flag g_once_flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_once</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">call_once</span>(g_once_flag, []()&#123;cout &lt;&lt; <span class="string">&quot;called once&quot;</span> &lt;&lt; endl;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_call_once</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(do_once)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(do_once)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t3</span><span class="params">(do_once)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    t3.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">called once</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="5-6-异步操作类"><a href="#5-6-异步操作类" class="headerlink" title="5.6 异步操作类"></a>5.6 异步操作类</h2><p>包括<code>future</code>、<code>promise</code>、<code>packaged_task</code>。future作为异步结果的传输通道，可以方便地获取线程函数的返回值，promise可以将数据与future绑定，方便线程赋值（如获取线程的返回值，无法直接通过join获取），packaged_task可用来包装<code>可调用对象</code>，将函数与future绑定。</p><h4 id="1-future"><a href="#1-future" class="headerlink" title="1. future"></a>1. future</h4><p><code>future</code>提供了获取异步结果的传输通道。可以通过future_status获取异步操作的状态。</p><p><code>future</code>不可拷贝，只能被移动；<code>shared_future</code>可以拷贝，放到容器中时需要使用shared_future。</p><ul><li>deferred：异步操作未开始</li><li>ready：异步操作已完成</li><li>timeout：异步操作超时</li></ul><p>获取future结果的方法：</p><ul><li><code>get()</code>：等待异步操作结束并返回结果</li><li><code>wait()</code>：等待异步操作结束，没有返回值</li><li><code>wait_for()</code>：超时等待返回结果</li></ul><p>future用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_future_status</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    future_status status;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; res = <span class="built_in">async</span>(launch::async, []() &#123; <span class="keyword">return</span> <span class="number">10</span>; &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        status = res.<span class="built_in">wait_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (status == future_status::deferred) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;deferred&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::ready) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ready&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::timeout) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (status != future_status::ready);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; res.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-promise"><a href="#2-promise" class="headerlink" title="2. promise"></a>2. promise</h4><blockquote><p>ref：C++11多线程-异步运行(1)之std::promise - 简书 (jianshu.com)</p></blockquote><p>将数据与future绑定，便于获取线程中的某个值，在线程中为传进来的promise赋值，线程结束后可通过promise的future获取值。取值是通过promise内部提供的future间接获取的。</p><p>promise用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_promise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    promise&lt;<span class="type">int</span>&gt; prom;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将promise作为参数传入</span></span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">([](promise&lt;<span class="type">int</span>&gt;&amp; p) &#123; p.set_value_at_thread_exit(<span class="number">9</span>); &#125;, ref(prom))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过promise获取内部的future并取值</span></span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f = prom.<span class="built_in">get_future</span>();</span><br><span class="line">    <span class="keyword">auto</span> r = f.<span class="built_in">get</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-packaged-task"><a href="#3-packaged-task" class="headerlink" title="3. packaged_task"></a>3. packaged_task</h4><p>将函数与future绑定，类似于promise，promise保存的是共享状态的值，而packaged_task保存的是函数。</p><p>packaged_task用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_packaged_task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">packaged_task&lt;<span class="title">int</span><span class="params">()</span>&gt; <span class="title">task</span><span class="params">([]() &#123; <span class="keyword">return</span> <span class="number">7</span>; &#125;)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">(ref(task))</span></span>;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f = task.<span class="built_in">get_future</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; f.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shared_future用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">worker_test_shared_future</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x + <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_shared_future</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">packaged_task&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>)</span>&gt; <span class="title">task</span><span class="params">(worker_test_shared_future)</span></span>;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; fut = task.<span class="built_in">get_future</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">thread</span>(<span class="built_in">ref</span>(task), <span class="number">2</span>).<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> val = fut.<span class="built_in">get</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// future不能拷贝，vector中只能使用shared_future</span></span><br><span class="line">    vector&lt;shared_future&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">async</span>(launch::async, [](<span class="type">int</span> a, <span class="type">int</span> b)&#123;<span class="keyword">return</span> a + b;&#125;, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="built_in">move</span>(f));    <span class="comment">// 需要传入右值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;shared_future res = &quot;</span> &lt;&lt; v[<span class="number">0</span>].<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-7-线程异步操作函数async"><a href="#5-7-线程异步操作函数async" class="headerlink" title="5.7 线程异步操作函数async"></a>5.7 线程异步操作函数async</h2><p>直接创建异步的task，并将任务返回的结果存储在future中。</p><p>获取结果可用<code>future.get();</code>，仅等待任务完成使用<code>future.wait();</code>。</p><p>async的函数原型：<code>async(std::launch::async | std::launch::deferred, f, args...)</code></p><ul><li>第一个参数：线程的创建策略<ul><li><code>std::launch::async</code>：调用async时便创建线程</li><li><code>std::launch::deferred</code>：延迟加载方式创建线程，知道调用<code>get()</code>或<code>wait()</code>时才创建线程</li></ul></li></ul><p>async用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_async</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f1 = <span class="built_in">async</span>(launch::async, []() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1 = &quot;</span> &lt;&lt; f1.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f2 = <span class="built_in">async</span>(launch::async, []() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;);</span><br><span class="line">    f2.<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f3 = <span class="built_in">async</span>(launch::async, []() &#123;</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;waiting...\n&quot;</span>;</span><br><span class="line">    future_status status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        status = f3.<span class="built_in">wait_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (status == future_status::deferred) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;deferred&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::ready) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ready&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::timeout) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (status != future_status::ready);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><ol><li>同步队列</li><li>线程池 - c++11实现：<a href="https://github.dev/progschj/ThreadPool/blob/master/example.cpp">ThreadPool.h - ThreadPool [GitHub]</a></li><li>原子变量示例 - 原子计数器</li><li>future用法</li><li>promise用法</li><li>packaged_task用法</li><li>shared_future用法</li></ol>]]></content>
    
    
    <summary type="html">本文为《深入应用C++11》第5章 多线程 内容的学习笔记。</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    <category term="深入应用C++11" scheme="https://www.wangliang.ml/categories/C/%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
    
    <category term="C++" scheme="https://www.wangliang.ml/tags/C/"/>
    
    <category term="C++11" scheme="https://www.wangliang.ml/tags/C-11/"/>
    
    <category term="多线程" scheme="https://www.wangliang.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="深入应用C++11" scheme="https://www.wangliang.ml/tags/%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程</title>
    <link href="https://www.wangliang.ml/2023/03/27/java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.wangliang.ml/2023/03/27/java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-27T14:13:27.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h1><h2 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1. IP地址"></a>1. IP地址</h2><p>InetAddress基础用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress2</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress3</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 常用方法</span></span><br><span class="line">            System.out.println(inetAddress3.getCanonicalHostName());</span><br><span class="line">            System.out.println(inetAddress3.getHostAddress());</span><br><span class="line">            System.out.println(inetAddress3.getHostName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-端口"><a href="#2-端口" class="headerlink" title="2. 端口"></a>2. 端口</h2><p>端口范围：<code>0~65535</code>，其中：</p><ul><li><code>0~1023</code>作为公有端口<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telnet：23</li></ul></li><li><code>1024~49151</code>作为程序注册端口<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1521</li></ul></li><li>剩余端口为动态端口<ul><li>查看所有端口：<code>netstat -ano</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetSocketAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">inetSocketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;www.baidu.com&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        System.out.println(inetSocketAddress.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-TCP实现聊天"><a href="#3-TCP实现聊天" class="headerlink" title="3. TCP实现聊天"></a>3. TCP实现聊天</h2><h3 id="3-1-服务器端"><a href="#3-1-服务器端" class="headerlink" title="3.1 服务器端"></a>3.1 服务器端</h3><p>步骤：</p><ul><li>创建<code>ServerSocket</code></li><li>调用<code>accept</code>等待客户端连接，并生成<code>Socket</code>对象</li><li>对<code>socket</code>对象调用<code>getInputStream</code>以获取输入流</li><li>利用<code>ByteArrayOutputStream</code>与字节数组读取数据，<code>ByteArrayOutputStream</code>可以保证数据不会乱码</li><li>最后关闭相关资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                serverSocket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-客户端"><a href="#3-2-客户端" class="headerlink" title="3.2 客户端"></a>3.2 客户端</h3><p>步骤：</p><ul><li>定义IP、port</li><li>创建<code>Socket</code>，并调用<code>getOutputStream</code>获取输出流，通过<code>write</code>写数据（PS：需要使用<code>getBytes</code>将数据转换为字节流）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, port);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;测试通信&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-TCP实现文件传输"><a href="#4-TCP实现文件传输" class="headerlink" title="4. TCP实现文件传输"></a>4. TCP实现文件传输</h2><h3 id="4-1-服务器端"><a href="#4-1-服务器端" class="headerlink" title="4.1 服务器端"></a>4.1 服务器端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;receive.png&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;已接收完毕!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2 客户端"></a>4.2 客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;send.png&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知服务器，发送结束</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">&quot;发送完毕!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        baos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-UDP数据传输"><a href="#5-UDP数据传输" class="headerlink" title="5. UDP数据传输"></a>5. UDP数据传输</h2><h3 id="5-1-发送端"><a href="#5-1-发送端" class="headerlink" title="5.1 发送端"></a>5.1 发送端</h3><p>由于使用字节流，因此长度应使用 <code>msg.getBytes().length</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;测试UDP!&quot;</span>;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 由于使用字节流，因此长度应使用 msg.getBytes().length</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, serverIP, port);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-接收端"><a href="#5-2-接收端" class="headerlink" title="5.2 接收端"></a>5.2 接收端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍Java网络编程相关基础知识。</summary>
    
    
    
    <category term="Java" scheme="https://www.wangliang.ml/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.wangliang.ml/tags/Java/"/>
    
    <category term="网络编程" scheme="https://www.wangliang.ml/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>openstack部署-devstack(含单节点与多节点部署)</title>
    <link href="https://www.wangliang.ml/2023/03/27/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/openstack%E9%83%A8%E7%BD%B2-devstack-%E5%90%AB%E5%8D%95%E8%8A%82%E7%82%B9%E4%B8%8E%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.wangliang.ml/2023/03/27/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/openstack%E9%83%A8%E7%BD%B2-devstack-%E5%90%AB%E5%8D%95%E8%8A%82%E7%82%B9%E4%B8%8E%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-27T10:59:23.000Z</published>
    <updated>2023-04-06T13:23:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用 DevStack 部署 OpenStack（W版本），包含单节点部署与多节点部署。</p><span id="more"></span><p>[toc]</p><h1 id="一、单节点部署"><a href="#一、单节点部署" class="headerlink" title="一、单节点部署"></a>一、单节点部署</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-镜像源"><a href="#1-1-镜像源" class="headerlink" title="1.1 镜像源"></a>1.1 镜像源</h3><p><code>sudo vim /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></pre></td></tr></table></figure><h3 id="1-2-pip源"><a href="#1-2-pip源" class="headerlink" title="1.2 pip源"></a>1.2 pip源</h3><p><code>sudo mkdir ~/.pip &amp;&amp; sudo vim ~/.pip/pip.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h3 id="1-3-安装依赖包"><a href="#1-3-安装依赖包" class="headerlink" title="1.3 安装依赖包"></a>1.3 安装依赖包</h3><p>更新并安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install bridge-utils git python3-pip</span><br><span class="line">sudo pip3 install wheel</span><br></pre></td></tr></table></figure><h2 id="2-OpenStack安装-wallaby"><a href="#2-OpenStack安装-wallaby" class="headerlink" title="2. OpenStack安装 - wallaby"></a>2. OpenStack安装 - wallaby</h2><h3 id="2-1-添加stack用户"><a href="#2-1-添加stack用户" class="headerlink" title="2.1 添加stack用户"></a>2.1 添加<code>stack</code>用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 stack 用户</span></span><br><span class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予 sudo 权限</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo <span class="built_in">tee</span> /etc/sudoers.d/stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 stack 用户登录</span></span><br><span class="line">sudo su - stack</span><br></pre></td></tr></table></figure><h3 id="2-2-设置代理"><a href="#2-2-设置代理" class="headerlink" title="2.2 设置代理"></a>2.2 设置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://proxy_ip:port</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=http://proxy_ip:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># export HTTP_PROXY=http://10.70.181.238:7890</span></span><br><span class="line"><span class="comment"># export HTTPS_PROXY=http://10.70.181.238:7890</span></span><br></pre></td></tr></table></figure><h3 id="2-3-下载devstack，使用-b指定版本"><a href="#2-3-下载devstack，使用-b指定版本" class="headerlink" title="2.3 下载devstack，使用-b指定版本"></a>2.3 下载devstack，使用<code>-b</code>指定版本</h3><p><code>git clone https://opendev.org/openstack/devstack.git -b stable/wallaby</code></p><h3 id="2-4-进入devstack目录，编辑配置文件"><a href="#2-4-进入devstack目录，编辑配置文件" class="headerlink" title="2.4 进入devstack目录，编辑配置文件"></a>2.4 进入devstack目录，编辑配置文件</h3><p><code>cd devstack &amp;&amp; vim local.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">  </span><br><span class="line">HOST_IP=172.19.204.10</span><br><span class="line"></span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">DEST=/opt/stack</span><br><span class="line">SCREEN_LOGDIR=<span class="variable">$DEST</span>/logs/screen</span><br></pre></td></tr></table></figure><ul><li><code>ADMIN_PASSWORD</code>：OpenStack 用户 <code>admin</code> 和 <code>demo</code> 的密码</li><li><code>DATABASE_PASSWORD</code>：MySQL 管理员用户密码</li><li><code>RABBIT_PASSWORD</code>：RabbitMQ 密码</li><li><code>SERVICE_PASSWORD</code>：服务组件和 KeyStone 交互的密码</li><li><code>GIT_BASE</code>：源代码托管服务器</li><li><code>HOST_IP</code>：绑定的 IP 地址</li></ul><h3 id="2-5-开始安装"><a href="#2-5-开始安装" class="headerlink" title="2.5 开始安装"></a>2.5 开始安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./stack.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 DevStack</span></span><br><span class="line">./unstack.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 DevStack 并删除配置文件等</span></span><br><span class="line">./clean.sh</span><br></pre></td></tr></table></figure><h3 id="2-6-安装完成"><a href="#2-6-安装完成" class="headerlink" title="2.6 安装完成"></a>2.6 安装完成</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">DevStack Component <span class="built_in">Timing</span></span><br><span class="line"> (times are in seconds)  </span><br><span class="line">=========================</span><br><span class="line">wait_for_service      <span class="number">15</span></span><br><span class="line">pip_install          <span class="number">118</span></span><br><span class="line">apt-get               <span class="number">58</span></span><br><span class="line">run_process           <span class="number">44</span></span><br><span class="line">dbsync                <span class="number">23</span></span><br><span class="line">apt-get-update         <span class="number">6</span></span><br><span class="line">test_with_retry        <span class="number">2</span></span><br><span class="line">async_wait             <span class="number">0</span></span><br><span class="line">osc                  <span class="number">170</span></span><br><span class="line">-------------------------</span><br><span class="line">Unaccounted time     <span class="number">646</span></span><br><span class="line">=========================</span><br><span class="line">Total runtime        <span class="number">1082</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is your host IP address: <span class="number">172.19</span><span class="number">.204</span><span class="number">.10</span></span><br><span class="line">This is your host IPv6 address: fc00:<span class="number">5</span>a24:<span class="number">1958</span>:<span class="number">1</span>:<span class="number">5</span>ea7:<span class="number">21f</span>f:fe3c:<span class="number">17</span>c4</span><br><span class="line">Horizon is now available at http:<span class="comment">//172.19.204.10/dashboard</span></span><br><span class="line">Keystone is serving at http:<span class="comment">//172.19.204.10/identity/</span></span><br><span class="line">The <span class="keyword">default</span> users are: admin <span class="keyword">and</span> demo</span><br><span class="line">The password: <span class="number">123</span></span><br><span class="line"></span><br><span class="line">Services are running under systemd unit files.</span><br><span class="line">For more information see: </span><br><span class="line">https:<span class="comment">//docs.openstack.org/devstack/latest/systemd.html</span></span><br><span class="line"></span><br><span class="line">DevStack Version: wallaby</span><br><span class="line">Change: ea636e0a92670353ac48274e704d30662f722691 Write safe.directory items to system git config <span class="number">2022</span><span class="number">-04</span><span class="number">-18</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">09</span> <span class="number">-0500</span></span><br><span class="line">OS Version: Ubuntu <span class="number">20.04</span> focal</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-04</span><span class="number">-21</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">10.495</span> | stack.sh completed in <span class="number">1083</span> seconds.</span><br></pre></td></tr></table></figure><h1 id="二、多节点部署"><a href="#二、多节点部署" class="headerlink" title="二、多节点部署"></a>二、多节点部署</h1><p>ubuntu20.04 LTS安装OpenStack Wallaby版本。一个controller节点，两个compute节点。</p><h2 id="1-环境准备-1"><a href="#1-环境准备-1" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><blockquote><p>【环境准备】部分的所有操作均需要在<strong>各节点</strong>执行。</p></blockquote><h3 id="1-1-换源、依赖安装"><a href="#1-1-换源、依赖安装" class="headerlink" title="1.1 换源、依赖安装"></a>1.1 换源、依赖安装</h3><h4 id="1-1-1-镜像源"><a href="#1-1-1-镜像源" class="headerlink" title="1.1.1 镜像源"></a>1.1.1 镜像源</h4><p><code>sudo vim /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></pre></td></tr></table></figure><p>更新软件包：<code>sudo apt update &amp;&amp; sudo apt upgrade</code></p><h4 id="1-1-2-pip源"><a href="#1-1-2-pip源" class="headerlink" title="1.1.2 pip源"></a>1.1.2 pip源</h4><p><code>sudo mkdir ~/.pip &amp;&amp; sudo vim ~/.pip/pip.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h4 id="1-1-3-安装部分依赖包"><a href="#1-1-3-安装部分依赖包" class="headerlink" title="1.1.3 安装部分依赖包"></a>1.1.3 安装部分依赖包</h4><p>有的依赖包不安装后面可能会出错，因此先手动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bridge-utils git python3-pip</span><br><span class="line">sudo pip3 install wheel</span><br></pre></td></tr></table></figure><h3 id="1-2-添加stack用户"><a href="#1-2-添加stack用户" class="headerlink" title="1.2 添加stack用户"></a>1.2 添加stack用户</h3><p>添加用户stack，并设置为无密码可执行sudo命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 stack 用户</span></span><br><span class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予 sudo 权限</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo <span class="built_in">tee</span> /etc/sudoers.d/stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 stack 用户登录</span></span><br><span class="line">sudo su - stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改stack用户密码，用于配置后续ssh的免密登录</span></span><br><span class="line">sudo passwd stack</span><br></pre></td></tr></table></figure><h3 id="1-3-设置代理"><a href="#1-3-设置代理" class="headerlink" title="1.3 设置代理"></a>1.3 设置代理</h3><p>通过<code>export</code>设置的代理仅在当前终端下有效，重新打开终端后也需重新设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://proxy_ip:port</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=http://proxy_ip:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># export HTTP_PROXY=http://10.70.181.238:7890</span></span><br><span class="line"><span class="comment"># export HTTPS_PROXY=http://10.70.181.238:7890</span></span><br></pre></td></tr></table></figure><h3 id="1-4-设置免密登录"><a href="#1-4-设置免密登录" class="headerlink" title="1.4 设置免密登录"></a>1.4 设置免密登录</h3><h4 id="1-4-1-修改hosts文件"><a href="#1-4-1-修改hosts文件" class="headerlink" title="1.4.1 修改hosts文件"></a>1.4.1 修改hosts文件</h4><p>修改hosts文件，并添加各节点的ip地址：<code>vim /etc/hosts</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.19.204.30 h3c-node01 compute2</span><br><span class="line">172.19.204.20 h3c-node02 compute1</span><br><span class="line">172.19.204.10 h3c-node03 controller</span><br></pre></td></tr></table></figure><h4 id="1-4-2-配置免密登录"><a href="#1-4-2-配置免密登录" class="headerlink" title="1.4.2 配置免密登录"></a>1.4.2 配置免密登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成key</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制key到其他节点</span></span><br><span class="line">ssh-copy-id stack@controller</span><br><span class="line">ssh-copy-id stack@compute1</span><br><span class="line">ssh-copy-id stack@compute2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连通性</span></span><br><span class="line">ssh stack@controller</span><br><span class="line">ssh stack@compute1</span><br><span class="line">ssh stack@compute2</span><br></pre></td></tr></table></figure><h3 id="1-5-下载devstack安装库"><a href="#1-5-下载devstack安装库" class="headerlink" title="1.5 下载devstack安装库"></a>1.5 下载devstack安装库</h3><p>通过<code>-b</code>指定版本。</p><p><code>git clone https://opendev.org/openstack/devstack.git -b stable/wallaby</code></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>先安装好controller，再安装computer节点。默认安装路径在<code>/opt/stack</code></p><h3 id="2-1-controller节点"><a href="#2-1-controller节点" class="headerlink" title="2.1 controller节点"></a>2.1 controller节点</h3><h4 id="2-1-1-修改devstack的配置文件"><a href="#2-1-1-修改devstack的配置文件" class="headerlink" title="2.1.1 修改devstack的配置文件"></a>2.1.1 修改devstack的配置文件</h4><h5 id="1-创建local-conf文件"><a href="#1-创建local-conf文件" class="headerlink" title="1. 创建local.conf文件"></a>1. 创建<code>local.conf</code>文件</h5><p>在下载的git仓库devstack目录下创建配置文件<code>local.conf</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">HOST_IP=172.19.204.10</span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">MULTI_HOST=1</span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log</span><br><span class="line">DEST=/opt/stack</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internal IP (Project IP)</span></span><br><span class="line"><span class="comment"># FIXED_RANGE=192.168.100.0/24</span></span><br><span class="line"><span class="comment"># External IP (Floating IP)</span></span><br><span class="line"><span class="comment"># FLOATING_RANGE=10.0.0.0/24</span></span><br></pre></td></tr></table></figure><h3 id="2-2-computer节点"><a href="#2-2-computer节点" class="headerlink" title="2.2 computer节点"></a>2.2 computer节点</h3><p>在下载的git仓库devstack目录下创建配置文件<code>local.conf</code>。</p><h4 id="2-2-1-computer1节点"><a href="#2-2-1-computer1节点" class="headerlink" title="2.2.1 computer1节点"></a>2.2.1 computer1节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">HOST_IP=172.19.204.20 <span class="comment"># change this per compute node</span></span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">MULTI_HOST=1</span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log</span><br><span class="line">DEST=/opt/stack</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">DATABASE_TYPE=mysql</span><br><span class="line">SERVICE_HOST=172.19.204.10</span><br><span class="line">MYSQL_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">RABBIT_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">GLANCE_HOSTPORT=<span class="variable">$SERVICE_HOST</span>:9292</span><br><span class="line">ENABLED_SERVICES=n-cpu,c-vol,placement-client,ovn-controller,ovs-vswitchd,ovsdb-server,q-ovn-metadata-agent</span><br><span class="line">NOVA_VNC_ENABLED=True</span><br><span class="line">NOVNCPROXY_URL=<span class="string">&quot;http://<span class="variable">$SERVICE_HOST</span>:6080/vnc_auto.html&quot;</span></span><br><span class="line">VNCSERVER_LISTEN=<span class="variable">$HOST_IP</span></span><br><span class="line">VNCSERVER_PROXYCLIENT_ADDRESS=<span class="variable">$VNCSERVER_LISTEN</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-computer2节点"><a href="#2-2-2-computer2节点" class="headerlink" title="2.2.2 computer2节点"></a>2.2.2 computer2节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">HOST_IP=172.19.204.30 <span class="comment"># change this per compute node</span></span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">MULTI_HOST=1</span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log</span><br><span class="line">DEST=/opt/stack</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">DATABASE_TYPE=mysql</span><br><span class="line">SERVICE_HOST=172.19.204.10</span><br><span class="line">MYSQL_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">RABBIT_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">GLANCE_HOSTPORT=<span class="variable">$SERVICE_HOST</span>:9292</span><br><span class="line">ENABLED_SERVICES=n-cpu,c-vol,q-agt,placement-client,ovn-controller,ovs-vswitchd,ovsdb-server,q-ovn-metadata-agent</span><br><span class="line">NOVA_VNC_ENABLED=True</span><br><span class="line">NOVNCPROXY_URL=<span class="string">&quot;http://<span class="variable">$SERVICE_HOST</span>:6080/vnc_auto.html&quot;</span></span><br><span class="line">VNCSERVER_LISTEN=<span class="variable">$HOST_IP</span></span><br><span class="line">VNCSERVER_PROXYCLIENT_ADDRESS=<span class="variable">$VNCSERVER_LISTEN</span></span><br></pre></td></tr></table></figure><h3 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h3><blockquote><p>各节点均需要执行</p></blockquote><h4 id="2-3-1-nova-conf"><a href="#2-3-1-nova-conf" class="headerlink" title="2.3.1 nova.conf"></a>2.3.1 nova.conf</h4><p>避免出现<code> [错误: Build of instance 6ec6e8b1-9300-4be4-95fe-20434ea041f5 aborted: Volume e3dcad3d-dd22-4947-99d8-b8d0ad4b1025 did not finish being created even after we waited 187 seconds or 61 attempts. And its status is error.]</code>问题。</p><p>修改<code>nova.conf</code>，添加以下参数设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@cinder ~] <span class="comment"># vim /etc/nova/nova.conf</span></span><br><span class="line"></span><br><span class="line">block_device_allocate_retries=600</span><br><span class="line">block_device_allocate_retries_interval=5</span><br><span class="line">block_device_creation_timeout=600</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">[root@cinder ~] <span class="comment"># sudo systemctl restart devstack@*</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-修改卷组位置"><a href="#2-3-2-修改卷组位置" class="headerlink" title="2.3.2 修改卷组位置"></a>2.3.2 修改卷组位置</h4><p>修改OpenStack创建虚拟机时分配磁盘的位置。</p><ol><li><p>查看<code>/etc/cinder/cinder.conf</code>，搜索<code>volume_group</code>对应的值，默认为<code>stack-volumes-lvmdriver-1</code></p></li><li><p>输入命令<code>vgs</code>查看当前vg，删除不需要的vg， <code>vgremove ****</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stack@controller:/$ sudo vgs</span><br><span class="line">  VG                        <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  stack-volumes-default       1   0   0 wz--n- &lt;30.00g &lt;30.00g</span><br><span class="line">  stack-volumes-lvmdriver-1   1   1   0 wz--n- &lt;30.00g   1.43g</span><br><span class="line">  vgubuntu                    1   2   0 wz--n-   1.09t      0 </span><br><span class="line"></span><br><span class="line">stack@controller:/$ sudo vgremove stack-volumes-lvmdriver-1</span><br></pre></td></tr></table></figure></li><li><p>在对应的磁盘上创建vg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pvcreate /dev/sdc</span><br><span class="line">sudo vgcreate stack-volumes-lvmdriver-1 /dev/sdc</span><br></pre></td></tr></table></figure></li><li><p>重启服务，<code>sudo systemctl restart devstack@*</code></p></li></ol><h3 id="2-4-上传镜像"><a href="#2-4-上传镜像" class="headerlink" title="2.4 上传镜像"></a>2.4 上传镜像</h3><blockquote><p>修改镜像格式（qcow2转raw）</p><p>qemu-img convert -f qcow2  win7.qcow2 -O  raw win7.raw</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack image create <span class="string">&quot;ubuntu20-server&quot;</span> --file ubuntu20-server.qcow2 --disk-format qcow2 --container-format bare --public</span><br></pre></td></tr></table></figure><h3 id="2-5-在指定compute节点创建实例"><a href="#2-5-在指定compute节点创建实例" class="headerlink" title="2.5 在指定compute节点创建实例"></a>2.5 在指定compute节点创建实例</h3><ol><li>查看可用zone：<code>openstack availability zone list</code></li><li>查看可用host：<code>openstack host list</code></li><li>查看可用node：<code>openstack hypervisor list</code></li><li>查看网络：<code>openstack network list</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack server create --flavor ds1G --image ubuntu20-server --nic net-id=937ba92f-4f53-4da2-a1a6-6d4e1cf433bf --availability-zone nova:compute1:compute1 ubuntu1-1</span><br></pre></td></tr></table></figure><ul><li>–flavor：实例类型</li><li>–image：镜像</li><li>–nic：网络 net-id网络id 第4步查得</li><li>–availability-zone nova:compute1:compute1 前三步查得</li></ul><p>查看各计算节点的虚拟机</p><ul><li>nova list –host controller –all-tenants</li><li>nova list –host compute1 –all-tenants</li></ul><h3 id="2-6-修改虚拟机网络配置"><a href="#2-6-修改虚拟机网络配置" class="headerlink" title="2.6 修改虚拟机网络配置"></a>2.6 修改虚拟机网络配置</h3><p>创建实例后，可以分配<strong>浮动IP</strong>，从而可以从外部直接操作虚拟机。</p><h4 id="2-6-1-ubuntu20"><a href="#2-6-1-ubuntu20" class="headerlink" title="2.6.1 ubuntu20"></a>2.6.1 ubuntu20</h4><p>默认使用<code>netplan</code>管理网络配置，修改<code>/etc/netplan/****.yaml</code>，修改网卡名称，设置DHCP并添加DNS，否则无法通过域名访问外部网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改网络配置</span></span><br><span class="line">vim /etc/netplan/****.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件示例</span></span><br><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens3:</span><br><span class="line">      dhcp4: <span class="literal">true</span></span><br><span class="line">      nameservers:</span><br><span class="line">              addresses: [114.114.114.114,8.8.8.8]</span><br><span class="line">  version: 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使网络配置生效</span></span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h4 id="2-6-2-ubuntu16"><a href="#2-6-2-ubuntu16" class="headerlink" title="2.6.2 ubuntu16"></a>2.6.2 ubuntu16</h4><ul><li>在<code>/etc/network/interfaces.d/***.cfg</code>中添加DNS服务器，添加<code>dns-nameserver 114.114.114.114</code></li><li>生效：<code>sudo /etc/init.d/networking restart</code>，<code>sudo /etc/init.d/resolvconf restart</code></li><li><img src="https://s2.loli.net/2022/04/29/LNqmMKubnAgp32j.png" alt="ubuntu16网络配置"></li></ul><h3 id="2-7-修改网络安全组规则"><a href="#2-7-修改网络安全组规则" class="headerlink" title="2.7 修改网络安全组规则"></a>2.7 修改网络安全组规则</h3><p>默认安全组规则不允许从外部进行SSH操作与ping操作，因此需要开启22端口与ICMP规则，可以直接将ICMP、TCP、UDP的所有端口的出入口规则打开。</p><p><img src="https://s2.loli.net/2022/04/29/ZHIxRkA7EmdLrOS.png" alt="安全组规则"></p><h1 id="三、DevStack相关组件"><a href="#三、DevStack相关组件" class="headerlink" title="三、DevStack相关组件"></a>三、DevStack相关组件</h1><p>devstack相关组件均通过<code>systemctl</code>进行控制，其日志信息通过<code>journalctl</code>查看。</p><p>c-*是cinder，g-*是glance，n-*是nova，o-*是octavia，q-*是neutron。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/ | grep devstack | awk ‘&#123;<span class="built_in">print</span> <span class="variable">$9</span>&#125;’</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">devstack@c-api.service</span><br><span class="line">devstack@c-sch.service</span><br><span class="line">devstack@c-vol.service</span><br><span class="line">devstack@dstat.service</span><br><span class="line">devstack@etcd.service</span><br><span class="line">devstack@g-api.service</span><br><span class="line">devstack@keystone.service</span><br><span class="line">devstack@n-api-meta.service</span><br><span class="line">devstack@n-api.service</span><br><span class="line">devstack@n-cond-cell1.service</span><br><span class="line">devstack@n-cpu.service</span><br><span class="line">devstack@n-novnc-cell1.service</span><br><span class="line">devstack@n-sch.service</span><br><span class="line">devstack@n-super-cond.service</span><br><span class="line">devstack@placement-api.service</span><br><span class="line">devstack@q-agt.service</span><br><span class="line">devstack@q-dhcp.service</span><br><span class="line">devstack@q-l3.service</span><br><span class="line">devstack@q-meta.service</span><br><span class="line">devstack@q-svc.service</span><br></pre></td></tr></table></figure><h1 id="四、可能遇到的问题"><a href="#四、可能遇到的问题" class="headerlink" title="四、可能遇到的问题"></a>四、可能遇到的问题</h1><h3 id="1-Host-is-not-mapped-to-any-cell"><a href="#1-Host-is-not-mapped-to-any-cell" class="headerlink" title="1. Host is not mapped to any cell"></a>1. Host is not mapped to any cell</h3><p>在控制节点执行<code>nova-manage cell_v2 discover_hosts --verbose</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stack@controller:~$ nova-manage cell_v2 discover_hosts --verbose</span><br><span class="line">Found 2 cell mappings.</span><br><span class="line">Skipping cell0 since it does not contain hosts.</span><br><span class="line">Getting computes from cell <span class="string">&#x27;cell1&#x27;</span>: 9b2d95a4-22da-4af4-8313-66f4d2f74680</span><br><span class="line">Checking host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node01&#x27;</span>: b1cc044a-841b-41fa-bbe0-ad07045ff46d</span><br><span class="line">Creating host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node01&#x27;</span>: b1cc044a-841b-41fa-bbe0-ad07045ff46d</span><br><span class="line">Checking host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node02&#x27;</span>: c4894695-8adf-4243-bc7f-9c950c6f9491</span><br><span class="line">Creating host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node02&#x27;</span>: c4894695-8adf-4243-bc7f-9c950c6f9491</span><br><span class="line">Found 2 unmapped computes <span class="keyword">in</span> cell: 9b2d95a4-22da-4af4-8313-66f4d2f74680</span><br></pre></td></tr></table></figure><h3 id="2-创建实例超时"><a href="#2-创建实例超时" class="headerlink" title="2. 创建实例超时"></a>2. 创建实例超时</h3><p><code>[错误: Build of instance 6ec6e8b1-9300-4be4-95fe-20434ea041f5 aborted: Volume e3dcad3d-dd22-4947-99d8-b8d0ad4b1025 did not finish being created even after we waited 187 seconds or 61 attempts. And its status is error.]</code></p><p>修改<code>nove.conf</code>中的重复尝试次数。参考[2.3.1 nove.conf](#2.3.1 nova.conf)。</p><h3 id="3-执行指令有warning"><a href="#3-执行指令有warning" class="headerlink" title="3. 执行指令有warning"></a>3. 执行指令有warning</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/python3/dist-packages/secretstorage/dhcrypto.py:15: CryptographyDeprecationWarning: int_from_bytes is deprecated, use int.from_bytes instead</span><br><span class="line">  from cryptography.utils import int_from_bytes</span><br><span class="line">/usr/lib/python3/dist-packages/secretstorage/util.py:19: CryptographyDeprecationWarning: int_from_bytes is deprecated, use int.from_bytes instead</span><br><span class="line">  from cryptography.utils import int_from_bytes</span><br></pre></td></tr></table></figure><p>将<code>cryptography</code>版本降至3.4以下，<code>pip install cryptography==3.3.2</code></p><h3 id="4-无法在compute节点使用控制台"><a href="#4-无法在compute节点使用控制台" class="headerlink" title="4. 无法在compute节点使用控制台"></a>4. 无法在compute节点使用控制台</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error response</span><br><span class="line">Error code: 404</span><br><span class="line">Message: File not found.</span><br><span class="line">Error code explanation: HTTPStatus.NOT_FOUND - Nothing matches the given URI.</span><br></pre></td></tr></table></figure><ol><li><p>方法1：将<code>local.conf</code>的<code>NOVNCPROXY_URL=&quot;http://$SERVICE_HOST:6080/vnc_auto.html&quot;</code>改为<code>NOVNCPROXY_URL=&quot;http://$SERVICE_HOST:6080/vnc_lite.html&quot;</code>，但是需要重装该节点的openstack</p></li><li><p>方法2：将controller节点的<code>vnc_lite.html</code>复制为<code>vnc_auto.html</code>，&#x3D;&#x3D;推荐&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@controller:/opt/stack/noVNC<span class="comment"># cp vnc_lite.html vnc_auto.html</span></span><br></pre></td></tr></table></figure></li><li><p>方法3：修改nova的配置文件，&#x3D;&#x3D;该方法未验证&#x3D;&#x3D;</p></li></ol><h3 id="5-创建实例时报错，PortBindingFailed"><a href="#5-创建实例时报错，PortBindingFailed" class="headerlink" title="5. 创建实例时报错，PortBindingFailed"></a>5. 创建实例时报错，PortBindingFailed</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PortBindingFailed: Binding failed <span class="keyword">for</span> port 57ae0adc-89f9-41c6-afa7-cef5c19c6276, please check neutron logs <span class="keyword">for</span> more information</span><br></pre></td></tr></table></figure><p>在DashBoard的【管理员】-【系统】-【系统信息】-【网络代理】中发现对应的compute节点没有<code>Open vSwitch agent</code>，需要在<code>local.conf</code>中修改<code>ENABLED_SERVICES</code>参数，添加<code>q-agt</code>以启用该服务。需<strong>重新部署</strong>该节点的openstack。</p><p><img src="https://s2.loli.net/2022/04/29/CS7O8v4ZnXxwpsB.png" alt="Openstack系统信息"></p><h3 id="6-dpkg-error-processing-package-rabbitmq-server"><a href="#6-dpkg-error-processing-package-rabbitmq-server" class="headerlink" title="6. dpkg: error processing package rabbitmq-server"></a>6. <code>dpkg: error processing package rabbitmq-server</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Setting up rabbitmq-server (3.8.2-0ubuntu1.3) ...</span><br><span class="line">Job <span class="keyword">for</span> rabbitmq-server.service failed because the control process exited with error code.</span><br><span class="line">See <span class="string">&quot;systemctl status rabbitmq-server.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">invoke-rc.d: initscript rabbitmq-server, action <span class="string">&quot;start&quot;</span> failed.</span><br><span class="line">● rabbitmq-server.service - RabbitMQ Messaging Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: activating (auto-restart) (Result: exit-code) since Wed 2022-03-09 12:18:24 CST; 13ms ago</span><br><span class="line">    Process: 275639 ExecStart=/usr/sbin/rabbitmq-server (code=exited, status=1/FAILURE)</span><br><span class="line">   Main PID: 275639 (code=exited, status=1/FAILURE)</span><br><span class="line">dpkg: error processing package rabbitmq-server (--configure):</span><br><span class="line"> installed rabbitmq-server package post-installation script subprocess returned error <span class="built_in">exit</span> status 1</span><br><span class="line">Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line"> rabbitmq-server</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br><span class="line">**解决**：</span><br><span class="line"></span><br><span class="line">参考：[(1条消息) dpkg: error processing package *** (--configure)解决办法](https://blog.csdn.net/qq_36561697/article/details/82224279)</span><br><span class="line">sudo <span class="built_in">mv</span> /var/lib/dpkg/info/ /var/lib/dpkg/info_old/</span><br><span class="line">sudo <span class="built_in">mkdir</span> /var/lib/dpkg/info/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">sudo <span class="built_in">mv</span> /var/lib/dpkg/info/* /var/lib/dpkg/info_old/</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/dpkg/info</span><br><span class="line">sudo <span class="built_in">mv</span> /var/lib/dpkg/info_old/ /var/lib/dpkg/info/</span><br></pre></td></tr></table></figure><h3 id="7-rabbitmq-server-service无法启动"><a href="#7-rabbitmq-server-service无法启动" class="headerlink" title="7. rabbitmq-server.service无法启动"></a>7. <code>rabbitmq-server.service</code>无法启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stack@h3c-node03:~/devstack$ sudo systemctl status rabbitmq-server.service</span><br><span class="line">● rabbitmq-server.service - RabbitMQ Messaging Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: activating (start) since Wed 2022-03-09 12:27:29 CST; 403ms ago</span><br><span class="line">   Main PID: 287819 (rabbitmq-server)</span><br><span class="line">      Tasks: 149 (<span class="built_in">limit</span>: 304188)</span><br><span class="line">     Memory: 68.4M</span><br><span class="line">     CGroup: /system.slice/rabbitmq-server.service</span><br><span class="line">             ├─287819 /bin/sh /usr/sbin/rabbitmq-server</span><br><span class="line">             ├─287823 /bin/sh /usr/lib/rabbitmq/bin/rabbitmq-server</span><br><span class="line">             ├─287914 /usr/lib/erlang/erts-10.6.4/bin/beam.smp -- -root /usr/lib/erlang -progname erl -- -home /var/lib/rabbitmq -- -pa /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.2/ebin -boot start_clean -noshe&gt;</span><br><span class="line">             ├─287925 erl_child_setup 65536</span><br><span class="line">             ├─288068 inet_gethost 4</span><br><span class="line">             └─288069 inet_gethost 4</span><br><span class="line"></span><br><span class="line">3月 09 12:27:29 h3c-node03 systemd[1]: Starting RabbitMQ Messaging Server...</span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line">修改`/etc/hosts`，将`127.0.0.1  hostname`加进去</span><br></pre></td></tr></table></figure><h3 id="8-连接mysql提示命令行使用密码不安全"><a href="#8-连接mysql提示命令行使用密码不安全" class="headerlink" title="8. 连接mysql提示命令行使用密码不安全"></a>8. 连接mysql提示命令行使用密码不安全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">ERROR 1698 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="9-die-if-not-set-215-NET-ID-39-Failure-creating-NET"><a href="#9-die-if-not-set-215-NET-ID-39-Failure-creating-NET" class="headerlink" title="9. die_if_not_set 215 NET_ID &#39;Failure creating NET"></a>9. <code>die_if_not_set 215 NET_ID &#39;Failure creating NET</code></h3><p>在<code>local.conf</code>添加ml2的VLAN配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q_PLUGIN=ml2</span><br><span class="line">ENABLE_TENANT_VLANS=True</span><br><span class="line">ML2_VLAN_RANGES=physnet1:1000:2000       <span class="comment"># physnet1 为物理网络名称</span></span><br><span class="line">重装，`./unstack.sh &amp;&amp; ./clean.sh &amp;&amp; ./stack.sh`，报错可多执行一次</span><br></pre></td></tr></table></figure><h3 id="10-The-user-clouds-yaml-file-didn’t-exist"><a href="#10-The-user-clouds-yaml-file-didn’t-exist" class="headerlink" title="10. The user clouds.yaml file didn’t exist."></a>10. The user clouds.yaml file didn’t exist.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">+functions-common:write_clouds_yaml:89     /usr/bin/python3.8 /home/stack/devstack/tools/update_clouds_yaml.py --file /etc/openstack/clouds.yaml --os-cloud devstack --os-region-name RegionOne --os-auth-url http://192.168.208.138/identity --os-username demo --os-password secret --os-project-name demo</span><br><span class="line">The user clouds.yaml file didn<span class="string">&#x27;t exist.</span></span><br><span class="line"><span class="string">+functions-common:write_clouds_yaml:100    /usr/bin/python3.8 /home/stack/devstack/tools/update_clouds_yaml.py --file /etc/openstack/clouds.yaml --os-cloud devstack-alt --os-region-name RegionOne --os-auth-url http://192.168.208.138/identity --os-username alt_demo --os-password secret --os-project-name alt_demo</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 108, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    main()</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 104, in main</span></span><br><span class="line"><span class="string">    update_clouds_yaml.run()</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 61, in run</span></span><br><span class="line"><span class="string">    self._read_clouds()</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 68, in _read_clouds</span></span><br><span class="line"><span class="string">    self._clouds = yaml.load(clouds_file)</span></span><br><span class="line"><span class="string">TypeError: load() missing 1 required positional argument: &#x27;</span>Loader<span class="string">&#x27;</span></span><br><span class="line"><span class="string">+functions-common:write_clouds_yaml:1      exit_trap</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:507                  local r=1</span></span><br><span class="line"><span class="string">++./stack.sh:exit_trap:508                  jobs -p</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:508                  jobs=</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:511                  [[ -n &#x27;</span><span class="string">&#x27; ]]</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:517                  &#x27;</span>[<span class="string">&#x27; -f /tmp/tmp.7EzmX9aLTV &#x27;</span>]<span class="string">&#x27;</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:518                  rm /tmp/tmp.7EzmX9aLTV</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:522                  kill_spinner</span></span><br><span class="line"><span class="string">+./stack.sh:kill_spinner:417               &#x27;</span>[<span class="string">&#x27; &#x27;</span>!<span class="string">&#x27; -z &#x27;</span><span class="string">&#x27; &#x27;</span>]<span class="string">&#x27;</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:524                  [[ 1 -ne 0 ]]</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:525                  echo &#x27;</span>Error on <span class="built_in">exit</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">Error on exit</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:527                  type -p generate-subunit</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:528                  generate-subunit 1646374392 324 fail</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:530                  [[ -z /opt/stack/logs ]]</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:533                  /usr/bin/python3.8 /home/stack/devstack/tools/worlddump.py -d /opt/stack/logs</span></span><br><span class="line"><span class="string">World dumping... see /opt/stack/logs/worlddump-2022-03-04-061836.txt for details</span></span><br></pre></td></tr></table></figure><p>修改文件<code>/home/stack/devstack/tools/update_clouds_yaml.py</code>68行代码为<code>self._clouds = yaml.safe_load(clouds_file)</code></p><h3 id="11-创建实例时块设备映射失败"><a href="#11-创建实例时块设备映射失败" class="headerlink" title="11. 创建实例时块设备映射失败"></a>11. 创建实例时块设备映射失败</h3><p><img src="https://secure2.wostatic.cn/static/jKzHYXr1uCLC24SxegTTbf/image.png?auth_key=1668775602-d52CPGGN9SNPxNQU4RdV5f-0-c5d9937105e9ce712098e5258af855ff" alt="img"></p><p>缺少虚拟卷，创建虚拟卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sda</span><br><span class="line">参考：</span><br><span class="line"></span><br><span class="line">[cinder-volume服务状态为down 解决方法_weixin_34104341的博客-CSDN博客](https://blog.csdn.net/weixin_34104341/article/details/92968833)</span><br></pre></td></tr></table></figure><h3 id="12-创建实例超时（镜像太大时会出现）"><a href="#12-创建实例超时（镜像太大时会出现）" class="headerlink" title="12. 创建实例超时（镜像太大时会出现）"></a>12. 创建实例超时（镜像太大时会出现）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> [错误: Build of instance <span class="number">6</span>ec6e8b1<span class="number">-9300</span><span class="number">-4b</span>e4<span class="number">-95f</span>e<span class="number">-20434</span>ea041f5 aborted: Volume e3dcad3d-dd22<span class="number">-4947</span><span class="number">-99</span>d8-b8d0ad4b1025 did <span class="keyword">not</span> finish being created even after we waited <span class="number">187</span> seconds <span class="keyword">or</span> <span class="number">61</span> attempts. And its status is error.]</span><br><span class="line">注意，此时尝试次数为<span class="number">61</span>，因此判断配置文件的重试次数<span class="number">60</span>不够，只有<span class="number">2</span>、<span class="number">3</span>次的时候并不是这个原因</span><br><span class="line">[root@cinder ~]<span class="meta">#vim /etc/nova/nova.conf</span></span><br><span class="line">block_device_allocate_retries=<span class="number">600</span></span><br><span class="line">block_device_allocate_retries_interval=<span class="number">5</span></span><br><span class="line">block_device_creation_timeout=<span class="number">600</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.51cto.com/u_15301988/5134179">Devstack 多节点自动化部署</a></p><p><a href="https://blog.csdn.net/m0_49212388/article/details/107606727">ubuntu18.04下使用devstack安装openstack多节点的ussuri版本</a></p><p><a href="https://docs.openstack.org/watcher/latest/contributor/devstack.html">Set up a development environment via DevStack — Watcher 8.1.0.dev3 documentation (openstack.org)</a></p><p>[Openstack 实现技术分解 (1) 开发环境 — Devstack 部署案例详解](<a href="https://www.cnblogs.com/jmilkfan-fanguiju/p/10589838.html#:~:text=Devstack">https://www.cnblogs.com/jmilkfan-fanguiju/p/10589838.html#:~:text=Devstack</a> 多节点部署的本质就是使用不同的 localrc 配置文件%2C 在不同的节点上运行 Devstack,部署脚本. 但需要注意的是%2C Openstack 多节点部署不仅是将不同的项目部署到不同的节点之上%2C 我们更应理解为是将 Openstack 项目中的不同服务部署到不同的节点之上.)</p><p><a href="https://www.cnblogs.com/Streamr-letsgo/p/9002859.html">使用devstack&#x2F;pike部署多节点实验</a></p><p><a href="https://blog.csdn.net/weixin_34104341/article/details/92968833">cinder-volume服务状态为down</a></p><p><a href="https://www.cnblogs.com/CloudMan6/default.html?page=36">每天5分钟玩转OpenStack - CloudMan</a></p>]]></content>
    
    
    <summary type="html">本文采用 DevStack 部署 OpenStack（W版本），包含单节点部署与多节点部署。</summary>
    
    
    
    <category term="云计算" scheme="https://www.wangliang.ml/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="OpenStack" scheme="https://www.wangliang.ml/tags/OpenStack/"/>
    
    <category term="DevStack" scheme="https://www.wangliang.ml/tags/DevStack/"/>
    
  </entry>
  
</feed>
