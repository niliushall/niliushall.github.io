<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>niliushall</title>
  
  
  <link href="https://www.wangliang.ml/atom.xml" rel="self"/>
  
  <link href="https://www.wangliang.ml/"/>
  <updated>2023-03-29T04:01:38.031Z</updated>
  <id>https://www.wangliang.ml/</id>
  
  <author>
    <name>niliushall</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《深入应用C++11》第6章 chrono、数字与字符串的转换</title>
    <link href="https://www.wangliang.ml/2023/03/29/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC6%E7%AB%A0-chrono%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://www.wangliang.ml/2023/03/29/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC6%E7%AB%A0-chrono%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-03-29T03:56:06.000Z</published>
    <updated>2023-03-29T04:01:38.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-1-chrono"><a href="#6-1-chrono" class="headerlink" title="6.1 chrono"></a>6.1 chrono</h2><h3 id="6-1-1-记录时长的duration"><a href="#6-1-1-记录时长的duration" class="headerlink" title="6.1.1 记录时长的duration"></a>6.1.1 记录时长的duration</h3><p>表示一段时间间隔，<code>duration&lt;Rep, ratio&lt;cnt, time_unit&gt;&gt;</code></p><ul><li>第一个参数表示时钟数类型</li><li>第二个参数表示每个时钟周期的秒数，如<code>typedef duration&lt;Rep, ratio&lt;60, 1&gt;&gt; seconds;</code></li></ul><p>包括chrono::hours、minutes、seconds、milliseconds、microseconds、nanoseconds</p><p>获取时间间隔：<code>count()</code>，返回值类型<code>int64_t</code>；且duration支持时间间隔的运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">chrono::minutes <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">chrono::seconds <span class="title">t2</span><span class="params">(<span class="number">60</span>)</span></span>;</span><br><span class="line">chrono::seconds t3 = t1 - t2;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;t3.count() = &quot;</span> &lt;&lt; t3.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>可以使用<code>duration_cast()</code>将当前的时钟周期转换为其他的时钟周期，再使用<code>count()</code>获取转换后的时间间隔。如将seconds转换为minutes。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">chrono::seconds <span class="title">t1</span><span class="params">(<span class="number">150</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; chrono::<span class="built_in">duration_cast</span>&lt;chrono::minutes&gt;(t1).<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;minutes&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>timer实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Timer</span>() : <span class="built_in">time_begin_</span>(chrono::high_resolution_clock::<span class="built_in">now</span>()) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123; time_begin_ = chrono::high_resolution_clock::<span class="built_in">now</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Duration = chrono::milliseconds&gt;</span><br><span class="line">    <span class="type">int64_t</span> <span class="built_in">elapsed</span>() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chrono::<span class="built_in">duration_cast</span>&lt;Duration&gt;(</span><br><span class="line">                   chrono::high_resolution_clock::<span class="built_in">now</span>() - time_begin_)</span><br><span class="line">            .<span class="built_in">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int64_t</span> <span class="title">elapsed_micro</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">elapsed</span>&lt;chrono::microseconds&gt;(chrono::high_resolution_clock::<span class="built_in">now</span>() - time_begin_).<span class="built_in">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int64_t</span> <span class="title">elapsed_seconds</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">elapsed</span>&lt;chrono::seconds&gt;(chrono::high_resolution_clock::<span class="built_in">now</span>() - time_begin_).<span class="built_in">count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    chrono::time_point&lt;chrono::high_resolution_clock&gt; time_begin_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Timer t;    <span class="comment">// 开始计时</span></span><br><span class="line">    <span class="keyword">auto</span> f = []()&#123;<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) <span class="type">int</span> x = <span class="number">1</span>+<span class="number">2</span>;&#125;;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;time = &quot;</span> &lt;&lt; t.<span class="built_in">elapsed_micro</span>() &lt;&lt; endl;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-数字与字符串的转换"><a href="#6-2-数字与字符串的转换" class="headerlink" title="6.2 数字与字符串的转换"></a>6.2 数字与字符串的转换</h2><ul><li>to_string</li><li>atoi</li><li>atoil</li><li>atoll</li><li>atof</li></ul>]]></content>
    
    
    <summary type="html">本文为《深入应用C++11》第6章 chrono、数字与字符串的转换 内容的学习笔记。</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    <category term="深入应用C++11" scheme="https://www.wangliang.ml/categories/C/%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
    
    <category term="C++,C++11,深入应用C++11" scheme="https://www.wangliang.ml/tags/C-C-11-%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
  </entry>
  
  <entry>
    <title>《深入应用C++11》第5章 多线程</title>
    <link href="https://www.wangliang.ml/2023/03/29/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC5%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.wangliang.ml/2023/03/29/%E3%80%8A%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C++11%E3%80%8B%E7%AC%AC5%E7%AB%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-03-29T03:50:38.000Z</published>
    <updated>2023-03-29T04:01:38.031Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="5-1-线程"><a href="#5-1-线程" class="headerlink" title="5.1 线程"></a>5.1 线程</h2><ol><li>线程创建<ul><li>直接创建：<code>thread t(worker);</code></li><li>使用移动语义：<code>thread t2(move(t));</code>，线程被<code>move</code>之后，对象<code>t</code>不再代表任何线程</li><li>使用bind：<code>thread t3(bind(worker, 1, 2));</code></li><li>lambda表达式：<code>thread t4([](int a, doubnle b)&#123;&#125;, 1, 2);</code></li></ul></li><li>等待线程结束：<code>t.join();</code></li><li>分离线程：<code>t.detach();</code>，后台执行，但是与主线程失去联系</li></ol><p>对每个线程必须进行join或detach，保证线程对象生命周期到主调函数结束之后仍然存在。</p><p><strong>线程基本用法</strong></p><ul><li>获取线程ID：<code>t.get_id();</code></li><li>获取CPU核数：<code>thread::hardware_concurrency();</code></li><li>线程休眠：<code>this_thread::sleep_for(chrono::seconds(3));</code></li></ul><p><strong>Ref</strong></p><p>thread基础：C++ 并发编程（一）：创建线程 - SegmentFault 思否：有一个系列</p><hr><h2 id="5-2-互斥量"><a href="#5-2-互斥量" class="headerlink" title="5.2 互斥量"></a>5.2 互斥量</h2><p>保护多线程同时访问的共享数据</p><p><strong>4种锁</strong></p><ul><li><code>mutex</code>：独占，不能递归使用</li><li><code>timed_mutex</code>：带超时的独占锁，设置超时等待时间，在超时后可以做其他事，使用while循环获取互斥量</li><li><code>recursive_mutex</code>：可递归使用，不带超时</li><li><code>recursive_timed_mutex</code>：带超时的递归锁</li></ul><p><strong>使用锁的方法</strong></p><ul><li><code>lock()</code>, <code>unlock()</code>：手动加锁解锁，<code>t.lock();</code> <code>t.unlock();</code></li><li><code>lock_guard&lt;&gt;</code>：析构时自动解锁，<code>lock_guard&lt;mutex&gt; lock(my_mutex);</code></li><li><code>unique_lock&lt;&gt;</code>：可手动解锁，析构时检查是否解锁并自动解锁，<code>unique_lock&lt;mutex&gt; lock(my_mutex);</code>；手动解锁：<code>lock.unlock();</code>；可配合<code>condition_variable</code>使用</li></ul><p>timed_mutex比mutex多了两个接口：<code>try_lock_for()</code>和<code>try_lock_until()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 带超时的互斥量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">timed_mutex g_timed_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_timed_mutex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">timeout</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g_timed_mutex.<span class="built_in">try_lock_for</span>(timeout)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;获得锁&quot;</span> &lt;&lt; endl;</span><br><span class="line">            g_timed_mutex.<span class="built_in">unlock</span>();     <span class="comment">// 由于已经获得锁并加锁，需要在此处解锁</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;未获得锁，处理其他事情&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-条件变量"><a href="#5-3-条件变量" class="headerlink" title="5.3 条件变量"></a>5.3 条件变量</h2><p>要配合<code>condition_variable</code>使用，必须使用<code>unique_lock</code>，而不能使用lock_guard，且unique_lock支持手动unlock，避免在整个函数期间占用资源</p><p>流程：首先对mutex加锁，若没有获得mutex的访问权限，则解锁，同时<code>wait()</code>阻塞直至等待的信号发生，再获取mutex的访问权限；最后调用<code>notify_one</code>或<code>notify_all</code>唤醒其他线程</p><p><strong>两种条件变量</strong></p><ul><li><code>condition_variable</code>：配合unique_lock<mutex>进行<code>wait()</code>操作</li><li><code>condition_variable_any</code>：和任意具有lock、unlock语义的mutex搭配使用，效率比condition_variable差</li></ul><p><strong>两种调用方式</strong></p><ul><li>循环中调用wait</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">condition_variable cv;</span><br><span class="line">mutex g_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_locK&lt;mutex&gt; <span class="title">lock</span><span class="params">(g_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>( 等待条件 ) &#123;</span><br><span class="line">        cv.<span class="built_in">wait</span>(lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>wait第二个参数使用lambda表达式，第二个参数相当于循环调用等待条件，返回false则wait函数会阻塞等待至被唤醒</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">condition_variable cv;</span><br><span class="line">mutex g_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_locK&lt;mutex&gt; <span class="title">lock</span><span class="params">(g_mutex)</span></span>;</span><br><span class="line">    cv.<span class="built_in">wait</span>(lock, []()&#123;<span class="keyword">return</span> 等待条件;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用while循环等待的原因：线程可能因为超时或虚假唤醒，造成假醒，此时应继续阻塞等待</p><p><strong>代码 - 同步队列</strong></p><ul><li>c++代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> *                                 同步队列</span></span><br><span class="line"><span class="comment"> * 使用 mutex 与 condition_variable 实现</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">SyncQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_full</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> queue_.<span class="built_in">size</span>() == max_size_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> !queue_.<span class="built_in">size</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SyncQueue</span>(<span class="type">int</span> size = <span class="number">0</span>) : <span class="built_in">max_size_</span>(size) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        cv_notfull_.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>]() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;缓冲区已满，需要等待&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">this</span>-&gt;<span class="built_in">is_full</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        queue_.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">        cv_notempty_.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">take</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        cv_notempty_.<span class="built_in">wait</span>(locker, [<span class="keyword">this</span>]()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;缓冲区空了，需要等待&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">this</span>-&gt;<span class="built_in">is_empty</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        x = queue_.<span class="built_in">front</span>();</span><br><span class="line">        queue_.<span class="built_in">pop_front</span>();</span><br><span class="line">        cv_notfull_.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        queue_.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> queue_.<span class="built_in">size</span>() == max_size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">get_size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> queue_.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;T&gt; queue_;                  <span class="comment">// 缓冲区</span></span><br><span class="line">    mutex mutex_;                    <span class="comment">// 结合条件变量使用</span></span><br><span class="line">    condition_variable cv_notempty_; <span class="comment">// 非空的条件变量</span></span><br><span class="line">    condition_variable cv_notfull_;  <span class="comment">// 非满的条件变量</span></span><br><span class="line">    <span class="type">int</span> max_size_;                   <span class="comment">// 队列的最大长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-原子变量"><a href="#5-4-原子变量" class="headerlink" title="5.4 原子变量"></a>5.4 原子变量</h2><p>使用<code>atomic&lt;T&gt;</code>定义</p><p>原子变量定义的数据无需使用mutex限制线程间的互斥访问</p><p>原子变量示例 - 原子计数器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AtomicCounter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123; ++value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123; --value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value.<span class="built_in">load</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    atomic&lt;<span class="type">int</span>&gt; value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-5-call-once-x2F-once-flag"><a href="#5-5-call-once-x2F-once-flag" class="headerlink" title="5.5 call_once &#x2F; once_flag"></a>5.5 call_once &#x2F; once_flag</h2><p><code>call_once</code>可以保证函数在多线程环境下仅被调用一次。使用<code>call_once</code>时需要一个<code>once_flag</code>作为<code>call_once</code>的参数。</p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> *                                 call_once / once_flag</span></span><br><span class="line"><span class="comment"> * ===========================================================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">once_flag g_once_flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_once</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">call_once</span>(g_once_flag, []()&#123;cout &lt;&lt; <span class="string">&quot;called once&quot;</span> &lt;&lt; endl;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_call_once</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(do_once)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(do_once)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t3</span><span class="params">(do_once)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    t3.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">called once</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="5-6-异步操作类"><a href="#5-6-异步操作类" class="headerlink" title="5.6 异步操作类"></a>5.6 异步操作类</h2><p>包括<code>future</code>、<code>promise</code>、<code>packaged_task</code>。future作为异步结果的传输通道，可以方便地获取线程函数的返回值，promise可以将数据与future绑定，方便线程赋值（如获取线程的返回值，无法直接通过join获取），packaged_task可用来包装<code>可调用对象</code>，将函数与future绑定。</p><h4 id="1-future"><a href="#1-future" class="headerlink" title="1. future"></a>1. future</h4><p><code>future</code>提供了获取异步结果的传输通道。可以通过future_status获取异步操作的状态。</p><p><code>future</code>不可拷贝，只能被移动；<code>shared_future</code>可以拷贝，放到容器中时需要使用shared_future。</p><ul><li>deferred：异步操作未开始</li><li>ready：异步操作已完成</li><li>timeout：异步操作超时</li></ul><p>获取future结果的方法：</p><ul><li><code>get()</code>：等待异步操作结束并返回结果</li><li><code>wait()</code>：等待异步操作结束，没有返回值</li><li><code>wait_for()</code>：超时等待返回结果</li></ul><p>future用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_future_status</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    future_status status;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; res = <span class="built_in">async</span>(launch::async, []() &#123; <span class="keyword">return</span> <span class="number">10</span>; &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        status = res.<span class="built_in">wait_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (status == future_status::deferred) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;deferred&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::ready) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ready&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::timeout) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (status != future_status::ready);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; res.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-promise"><a href="#2-promise" class="headerlink" title="2. promise"></a>2. promise</h4><blockquote><p>ref：C++11多线程-异步运行(1)之std::promise - 简书 (jianshu.com)</p></blockquote><p>将数据与future绑定，便于获取线程中的某个值，在线程中为传进来的promise赋值，线程结束后可通过promise的future获取值。取值是通过promise内部提供的future间接获取的。</p><p>promise用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_promise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    promise&lt;<span class="type">int</span>&gt; prom;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将promise作为参数传入</span></span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">([](promise&lt;<span class="type">int</span>&gt;&amp; p) &#123; p.set_value_at_thread_exit(<span class="number">9</span>); &#125;, ref(prom))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过promise获取内部的future并取值</span></span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f = prom.<span class="built_in">get_future</span>();</span><br><span class="line">    <span class="keyword">auto</span> r = f.<span class="built_in">get</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-packaged-task"><a href="#3-packaged-task" class="headerlink" title="3. packaged_task"></a>3. packaged_task</h4><p>将函数与future绑定，类似于promise，promise保存的是共享状态的值，而packaged_task保存的是函数。</p><p>packaged_task用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_packaged_task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">packaged_task&lt;<span class="title">int</span><span class="params">()</span>&gt; <span class="title">task</span><span class="params">([]() &#123; <span class="keyword">return</span> <span class="number">7</span>; &#125;)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">(ref(task))</span></span>;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f = task.<span class="built_in">get_future</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; f.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shared_future用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">worker_test_shared_future</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x + <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_shared_future</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">packaged_task&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>)</span>&gt; <span class="title">task</span><span class="params">(worker_test_shared_future)</span></span>;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; fut = task.<span class="built_in">get_future</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">thread</span>(<span class="built_in">ref</span>(task), <span class="number">2</span>).<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> val = fut.<span class="built_in">get</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// future不能拷贝，vector中只能使用shared_future</span></span><br><span class="line">    vector&lt;shared_future&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">async</span>(launch::async, [](<span class="type">int</span> a, <span class="type">int</span> b)&#123;<span class="keyword">return</span> a + b;&#125;, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="built_in">move</span>(f));    <span class="comment">// 需要传入右值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;shared_future res = &quot;</span> &lt;&lt; v[<span class="number">0</span>].<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-7-线程异步操作函数async"><a href="#5-7-线程异步操作函数async" class="headerlink" title="5.7 线程异步操作函数async"></a>5.7 线程异步操作函数async</h2><p>直接创建异步的task，并将任务返回的结果存储在future中。</p><p>获取结果可用<code>future.get();</code>，仅等待任务完成使用<code>future.wait();</code>。</p><p>async的函数原型：<code>async(std::launch::async | std::launch::deferred, f, args...)</code></p><ul><li>第一个参数：线程的创建策略<ul><li><code>std::launch::async</code>：调用async时便创建线程</li><li><code>std::launch::deferred</code>：延迟加载方式创建线程，知道调用<code>get()</code>或<code>wait()</code>时才创建线程</li></ul></li></ul><p>async用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_async</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f1 = <span class="built_in">async</span>(launch::async, []() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1 = &quot;</span> &lt;&lt; f1.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f2 = <span class="built_in">async</span>(launch::async, []() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;);</span><br><span class="line">    f2.<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line">    future&lt;<span class="type">int</span>&gt; f3 = <span class="built_in">async</span>(launch::async, []() &#123;</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;waiting...\n&quot;</span>;</span><br><span class="line">    future_status status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        status = f3.<span class="built_in">wait_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (status == future_status::deferred) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;deferred&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::ready) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ready&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == future_status::timeout) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (status != future_status::ready);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><ol><li>同步队列</li><li>线程池 - c++11实现：<a href="https://github.dev/progschj/ThreadPool/blob/master/example.cpp">ThreadPool.h - ThreadPool [GitHub]</a></li><li>原子变量示例 - 原子计数器</li><li>future用法</li><li>promise用法</li><li>packaged_task用法</li><li>shared_future用法</li></ol>]]></content>
    
    
    <summary type="html">本文为《深入应用C++11》第5章 多线程 内容的学习笔记。</summary>
    
    
    
    <category term="C++" scheme="https://www.wangliang.ml/categories/C/"/>
    
    <category term="深入应用C++11" scheme="https://www.wangliang.ml/categories/C/%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
    
    <category term="C++,C++11,多线程,深入应用C++11" scheme="https://www.wangliang.ml/tags/C-C-11-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%B7%B1%E5%85%A5%E5%BA%94%E7%94%A8C-11/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程</title>
    <link href="https://www.wangliang.ml/2023/03/27/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.wangliang.ml/2023/03/27/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-27T14:13:27.000Z</published>
    <updated>2023-03-29T04:01:38.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h1><h2 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1. IP地址"></a>1. IP地址</h2><p>InetAddress基础用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress2</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress3</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 常用方法</span></span><br><span class="line">            System.out.println(inetAddress3.getCanonicalHostName());</span><br><span class="line">            System.out.println(inetAddress3.getHostAddress());</span><br><span class="line">            System.out.println(inetAddress3.getHostName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-端口"><a href="#2-端口" class="headerlink" title="2. 端口"></a>2. 端口</h2><p>端口范围：<code>0~65535</code>，其中：</p><ul><li><code>0~1023</code>作为公有端口<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telnet：23</li></ul></li><li><code>1024~49151</code>作为程序注册端口<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1521</li></ul></li><li>剩余端口为动态端口<ul><li>查看所有端口：<code>netstat -ano</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetSocketAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">inetSocketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;www.baidu.com&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        System.out.println(inetSocketAddress.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-TCP实现聊天"><a href="#3-TCP实现聊天" class="headerlink" title="3. TCP实现聊天"></a>3. TCP实现聊天</h2><h3 id="3-1-服务器端"><a href="#3-1-服务器端" class="headerlink" title="3.1 服务器端"></a>3.1 服务器端</h3><p>步骤：</p><ul><li>创建<code>ServerSocket</code></li><li>调用<code>accept</code>等待客户端连接，并生成<code>Socket</code>对象</li><li>对<code>socket</code>对象调用<code>getInputStream</code>以获取输入流</li><li>利用<code>ByteArrayOutputStream</code>与字节数组读取数据，<code>ByteArrayOutputStream</code>可以保证数据不会乱码</li><li>最后关闭相关资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                serverSocket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-客户端"><a href="#3-2-客户端" class="headerlink" title="3.2 客户端"></a>3.2 客户端</h3><p>步骤：</p><ul><li>定义IP、port</li><li>创建<code>Socket</code>，并调用<code>getOutputStream</code>获取输出流，通过<code>write</code>写数据（PS：需要使用<code>getBytes</code>将数据转换为字节流）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(serverIP, port);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;测试通信&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-TCP实现文件传输"><a href="#4-TCP实现文件传输" class="headerlink" title="4. TCP实现文件传输"></a>4. TCP实现文件传输</h2><h3 id="4-1-服务器端"><a href="#4-1-服务器端" class="headerlink" title="4.1 服务器端"></a>4.1 服务器端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;receive.png&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;已接收完毕!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2 客户端"></a>4.2 客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;send.png&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知服务器，发送结束</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">&quot;发送完毕!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        baos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-UDP数据传输"><a href="#5-UDP数据传输" class="headerlink" title="5. UDP数据传输"></a>5. UDP数据传输</h2><h3 id="5-1-发送端"><a href="#5-1-发送端" class="headerlink" title="5.1 发送端"></a>5.1 发送端</h3><p>由于使用字节流，因此长度应使用 <code>msg.getBytes().length</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;测试UDP!&quot;</span>;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">serverIP</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 由于使用字节流，因此长度应使用 msg.getBytes().length</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, serverIP, port);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-接收端"><a href="#5-2-接收端" class="headerlink" title="5.2 接收端"></a>5.2 接收端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.wl.netprograming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文主要介绍Java网络编程相关基础知识。</summary>
    
    
    
    <category term="Java" scheme="https://www.wangliang.ml/categories/Java/"/>
    
    
    <category term="Java" scheme="https://www.wangliang.ml/tags/Java/"/>
    
    <category term="网络编程" scheme="https://www.wangliang.ml/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>openstack部署-devstack(含单节点与多节点部署)</title>
    <link href="https://www.wangliang.ml/2023/03/27/openstack%E9%83%A8%E7%BD%B2-devstack-%E5%90%AB%E5%8D%95%E8%8A%82%E7%82%B9%E4%B8%8E%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.wangliang.ml/2023/03/27/openstack%E9%83%A8%E7%BD%B2-devstack-%E5%90%AB%E5%8D%95%E8%8A%82%E7%82%B9%E4%B8%8E%E5%A4%9A%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-27T10:59:23.000Z</published>
    <updated>2023-03-29T04:01:38.031Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用 DevStack 部署 OpenStack（W版本），包含单节点部署与多节点部署。</p><span id="more"></span><p>[toc]</p><h1 id="一、单节点部署"><a href="#一、单节点部署" class="headerlink" title="一、单节点部署"></a>一、单节点部署</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-镜像源"><a href="#1-1-镜像源" class="headerlink" title="1.1 镜像源"></a>1.1 镜像源</h3><p><code>sudo vim /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></pre></td></tr></table></figure><h3 id="1-2-pip源"><a href="#1-2-pip源" class="headerlink" title="1.2 pip源"></a>1.2 pip源</h3><p><code>sudo mkdir ~/.pip &amp;&amp; sudo vim ~/.pip/pip.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h3 id="1-3-安装依赖包"><a href="#1-3-安装依赖包" class="headerlink" title="1.3 安装依赖包"></a>1.3 安装依赖包</h3><p>更新并安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install bridge-utils git python3-pip</span><br><span class="line">sudo pip3 install wheel</span><br></pre></td></tr></table></figure><h2 id="2-OpenStack安装-wallaby"><a href="#2-OpenStack安装-wallaby" class="headerlink" title="2. OpenStack安装 - wallaby"></a>2. OpenStack安装 - wallaby</h2><h3 id="2-1-添加stack用户"><a href="#2-1-添加stack用户" class="headerlink" title="2.1 添加stack用户"></a>2.1 添加<code>stack</code>用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 stack 用户</span></span><br><span class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予 sudo 权限</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo <span class="built_in">tee</span> /etc/sudoers.d/stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 stack 用户登录</span></span><br><span class="line">sudo su - stack</span><br></pre></td></tr></table></figure><h3 id="2-2-设置代理"><a href="#2-2-设置代理" class="headerlink" title="2.2 设置代理"></a>2.2 设置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://proxy_ip:port</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=http://proxy_ip:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># export HTTP_PROXY=http://10.70.181.238:7890</span></span><br><span class="line"><span class="comment"># export HTTPS_PROXY=http://10.70.181.238:7890</span></span><br></pre></td></tr></table></figure><h3 id="2-3-下载devstack，使用-b指定版本"><a href="#2-3-下载devstack，使用-b指定版本" class="headerlink" title="2.3 下载devstack，使用-b指定版本"></a>2.3 下载devstack，使用<code>-b</code>指定版本</h3><p><code>git clone https://opendev.org/openstack/devstack.git -b stable/wallaby</code></p><h3 id="2-4-进入devstack目录，编辑配置文件"><a href="#2-4-进入devstack目录，编辑配置文件" class="headerlink" title="2.4 进入devstack目录，编辑配置文件"></a>2.4 进入devstack目录，编辑配置文件</h3><p><code>cd devstack &amp;&amp; vim local.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">  </span><br><span class="line">HOST_IP=172.19.204.10</span><br><span class="line"></span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">DEST=/opt/stack</span><br><span class="line">SCREEN_LOGDIR=<span class="variable">$DEST</span>/logs/screen</span><br></pre></td></tr></table></figure><ul><li><code>ADMIN_PASSWORD</code>：OpenStack 用户 <code>admin</code> 和 <code>demo</code> 的密码</li><li><code>DATABASE_PASSWORD</code>：MySQL 管理员用户密码</li><li><code>RABBIT_PASSWORD</code>：RabbitMQ 密码</li><li><code>SERVICE_PASSWORD</code>：服务组件和 KeyStone 交互的密码</li><li><code>GIT_BASE</code>：源代码托管服务器</li><li><code>HOST_IP</code>：绑定的 IP 地址</li></ul><h3 id="2-5-开始安装"><a href="#2-5-开始安装" class="headerlink" title="2.5 开始安装"></a>2.5 开始安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./stack.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 DevStack</span></span><br><span class="line">./unstack.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 DevStack 并删除配置文件等</span></span><br><span class="line">./clean.sh</span><br></pre></td></tr></table></figure><h3 id="2-6-安装完成"><a href="#2-6-安装完成" class="headerlink" title="2.6 安装完成"></a>2.6 安装完成</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">DevStack Component <span class="built_in">Timing</span></span><br><span class="line"> (times are in seconds)  </span><br><span class="line">=========================</span><br><span class="line">wait_for_service      <span class="number">15</span></span><br><span class="line">pip_install          <span class="number">118</span></span><br><span class="line">apt-get               <span class="number">58</span></span><br><span class="line">run_process           <span class="number">44</span></span><br><span class="line">dbsync                <span class="number">23</span></span><br><span class="line">apt-get-update         <span class="number">6</span></span><br><span class="line">test_with_retry        <span class="number">2</span></span><br><span class="line">async_wait             <span class="number">0</span></span><br><span class="line">osc                  <span class="number">170</span></span><br><span class="line">-------------------------</span><br><span class="line">Unaccounted time     <span class="number">646</span></span><br><span class="line">=========================</span><br><span class="line">Total runtime        <span class="number">1082</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is your host IP address: <span class="number">172.19</span><span class="number">.204</span><span class="number">.10</span></span><br><span class="line">This is your host IPv6 address: fc00:<span class="number">5</span>a24:<span class="number">1958</span>:<span class="number">1</span>:<span class="number">5</span>ea7:<span class="number">21f</span>f:fe3c:<span class="number">17</span>c4</span><br><span class="line">Horizon is now available at http:<span class="comment">//172.19.204.10/dashboard</span></span><br><span class="line">Keystone is serving at http:<span class="comment">//172.19.204.10/identity/</span></span><br><span class="line">The <span class="keyword">default</span> users are: admin <span class="keyword">and</span> demo</span><br><span class="line">The password: <span class="number">123</span></span><br><span class="line"></span><br><span class="line">Services are running under systemd unit files.</span><br><span class="line">For more information see: </span><br><span class="line">https:<span class="comment">//docs.openstack.org/devstack/latest/systemd.html</span></span><br><span class="line"></span><br><span class="line">DevStack Version: wallaby</span><br><span class="line">Change: ea636e0a92670353ac48274e704d30662f722691 Write safe.directory items to system git config <span class="number">2022</span><span class="number">-04</span><span class="number">-18</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">09</span> <span class="number">-0500</span></span><br><span class="line">OS Version: Ubuntu <span class="number">20.04</span> focal</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-04</span><span class="number">-21</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">10.495</span> | stack.sh completed in <span class="number">1083</span> seconds.</span><br></pre></td></tr></table></figure><h1 id="二、多节点部署"><a href="#二、多节点部署" class="headerlink" title="二、多节点部署"></a>二、多节点部署</h1><p>ubuntu20.04 LTS安装OpenStack Wallaby版本。一个controller节点，两个compute节点。</p><h2 id="1-环境准备-1"><a href="#1-环境准备-1" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><blockquote><p>【环境准备】部分的所有操作均需要在<strong>各节点</strong>执行。</p></blockquote><h3 id="1-1-换源、依赖安装"><a href="#1-1-换源、依赖安装" class="headerlink" title="1.1 换源、依赖安装"></a>1.1 换源、依赖安装</h3><h4 id="1-1-1-镜像源"><a href="#1-1-1-镜像源" class="headerlink" title="1.1.1 镜像源"></a>1.1.1 镜像源</h4><p><code>sudo vim /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></pre></td></tr></table></figure><p>更新软件包：<code>sudo apt update &amp;&amp; sudo apt upgrade</code></p><h4 id="1-1-2-pip源"><a href="#1-1-2-pip源" class="headerlink" title="1.1.2 pip源"></a>1.1.2 pip源</h4><p><code>sudo mkdir ~/.pip &amp;&amp; sudo vim ~/.pip/pip.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h4 id="1-1-3-安装部分依赖包"><a href="#1-1-3-安装部分依赖包" class="headerlink" title="1.1.3 安装部分依赖包"></a>1.1.3 安装部分依赖包</h4><p>有的依赖包不安装后面可能会出错，因此先手动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bridge-utils git python3-pip</span><br><span class="line">sudo pip3 install wheel</span><br></pre></td></tr></table></figure><h3 id="1-2-添加stack用户"><a href="#1-2-添加stack用户" class="headerlink" title="1.2 添加stack用户"></a>1.2 添加stack用户</h3><p>添加用户stack，并设置为无密码可执行sudo命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 stack 用户</span></span><br><span class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授予 sudo 权限</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo <span class="built_in">tee</span> /etc/sudoers.d/stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 stack 用户登录</span></span><br><span class="line">sudo su - stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改stack用户密码，用于配置后续ssh的免密登录</span></span><br><span class="line">sudo passwd stack</span><br></pre></td></tr></table></figure><h3 id="1-3-设置代理"><a href="#1-3-设置代理" class="headerlink" title="1.3 设置代理"></a>1.3 设置代理</h3><p>通过<code>export</code>设置的代理仅在当前终端下有效，重新打开终端后也需重新设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://proxy_ip:port</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=http://proxy_ip:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># export HTTP_PROXY=http://10.70.181.238:7890</span></span><br><span class="line"><span class="comment"># export HTTPS_PROXY=http://10.70.181.238:7890</span></span><br></pre></td></tr></table></figure><h3 id="1-4-设置免密登录"><a href="#1-4-设置免密登录" class="headerlink" title="1.4 设置免密登录"></a>1.4 设置免密登录</h3><h4 id="1-4-1-修改hosts文件"><a href="#1-4-1-修改hosts文件" class="headerlink" title="1.4.1 修改hosts文件"></a>1.4.1 修改hosts文件</h4><p>修改hosts文件，并添加各节点的ip地址：<code>vim /etc/hosts</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.19.204.30 h3c-node01 compute2</span><br><span class="line">172.19.204.20 h3c-node02 compute1</span><br><span class="line">172.19.204.10 h3c-node03 controller</span><br></pre></td></tr></table></figure><h4 id="1-4-2-配置免密登录"><a href="#1-4-2-配置免密登录" class="headerlink" title="1.4.2 配置免密登录"></a>1.4.2 配置免密登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成key</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制key到其他节点</span></span><br><span class="line">ssh-copy-id stack@controller</span><br><span class="line">ssh-copy-id stack@compute1</span><br><span class="line">ssh-copy-id stack@compute2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连通性</span></span><br><span class="line">ssh stack@controller</span><br><span class="line">ssh stack@compute1</span><br><span class="line">ssh stack@compute2</span><br></pre></td></tr></table></figure><h3 id="1-5-下载devstack安装库"><a href="#1-5-下载devstack安装库" class="headerlink" title="1.5 下载devstack安装库"></a>1.5 下载devstack安装库</h3><p>通过<code>-b</code>指定版本。</p><p><code>git clone https://opendev.org/openstack/devstack.git -b stable/wallaby</code></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>先安装好controller，再安装computer节点。默认安装路径在<code>/opt/stack</code></p><h3 id="2-1-controller节点"><a href="#2-1-controller节点" class="headerlink" title="2.1 controller节点"></a>2.1 controller节点</h3><h4 id="2-1-1-修改devstack的配置文件"><a href="#2-1-1-修改devstack的配置文件" class="headerlink" title="2.1.1 修改devstack的配置文件"></a>2.1.1 修改devstack的配置文件</h4><h5 id="1-创建local-conf文件"><a href="#1-创建local-conf文件" class="headerlink" title="1. 创建local.conf文件"></a>1. 创建<code>local.conf</code>文件</h5><p>在下载的git仓库devstack目录下创建配置文件<code>local.conf</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">HOST_IP=172.19.204.10</span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">MULTI_HOST=1</span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log</span><br><span class="line">DEST=/opt/stack</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internal IP (Project IP)</span></span><br><span class="line"><span class="comment"># FIXED_RANGE=192.168.100.0/24</span></span><br><span class="line"><span class="comment"># External IP (Floating IP)</span></span><br><span class="line"><span class="comment"># FLOATING_RANGE=10.0.0.0/24</span></span><br></pre></td></tr></table></figure><h3 id="2-2-computer节点"><a href="#2-2-computer节点" class="headerlink" title="2.2 computer节点"></a>2.2 computer节点</h3><p>在下载的git仓库devstack目录下创建配置文件<code>local.conf</code>。</p><h4 id="2-2-1-computer1节点"><a href="#2-2-1-computer1节点" class="headerlink" title="2.2.1 computer1节点"></a>2.2.1 computer1节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">HOST_IP=172.19.204.20 <span class="comment"># change this per compute node</span></span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">MULTI_HOST=1</span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log</span><br><span class="line">DEST=/opt/stack</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">DATABASE_TYPE=mysql</span><br><span class="line">SERVICE_HOST=172.19.204.10</span><br><span class="line">MYSQL_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">RABBIT_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">GLANCE_HOSTPORT=<span class="variable">$SERVICE_HOST</span>:9292</span><br><span class="line">ENABLED_SERVICES=n-cpu,c-vol,placement-client,ovn-controller,ovs-vswitchd,ovsdb-server,q-ovn-metadata-agent</span><br><span class="line">NOVA_VNC_ENABLED=True</span><br><span class="line">NOVNCPROXY_URL=<span class="string">&quot;http://<span class="variable">$SERVICE_HOST</span>:6080/vnc_auto.html&quot;</span></span><br><span class="line">VNCSERVER_LISTEN=<span class="variable">$HOST_IP</span></span><br><span class="line">VNCSERVER_PROXYCLIENT_ADDRESS=<span class="variable">$VNCSERVER_LISTEN</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-computer2节点"><a href="#2-2-2-computer2节点" class="headerlink" title="2.2.2 computer2节点"></a>2.2.2 computer2节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">local</span>|localrc]]</span><br><span class="line">HOST_IP=172.19.204.30 <span class="comment"># change this per compute node</span></span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line"></span><br><span class="line">OS_AUTH_URL=http://172.19.204.10:5000/v3</span><br><span class="line"></span><br><span class="line">MULTI_HOST=1</span><br><span class="line">LOGFILE=/opt/stack/logs/stack.sh.log</span><br><span class="line">DEST=/opt/stack</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=123</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">DATABASE_TYPE=mysql</span><br><span class="line">SERVICE_HOST=172.19.204.10</span><br><span class="line">MYSQL_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">RABBIT_HOST=<span class="variable">$SERVICE_HOST</span></span><br><span class="line">GLANCE_HOSTPORT=<span class="variable">$SERVICE_HOST</span>:9292</span><br><span class="line">ENABLED_SERVICES=n-cpu,c-vol,q-agt,placement-client,ovn-controller,ovs-vswitchd,ovsdb-server,q-ovn-metadata-agent</span><br><span class="line">NOVA_VNC_ENABLED=True</span><br><span class="line">NOVNCPROXY_URL=<span class="string">&quot;http://<span class="variable">$SERVICE_HOST</span>:6080/vnc_auto.html&quot;</span></span><br><span class="line">VNCSERVER_LISTEN=<span class="variable">$HOST_IP</span></span><br><span class="line">VNCSERVER_PROXYCLIENT_ADDRESS=<span class="variable">$VNCSERVER_LISTEN</span></span><br></pre></td></tr></table></figure><h3 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h3><blockquote><p>各节点均需要执行</p></blockquote><h4 id="2-3-1-nova-conf"><a href="#2-3-1-nova-conf" class="headerlink" title="2.3.1 nova.conf"></a>2.3.1 nova.conf</h4><p>避免出现<code> [错误: Build of instance 6ec6e8b1-9300-4be4-95fe-20434ea041f5 aborted: Volume e3dcad3d-dd22-4947-99d8-b8d0ad4b1025 did not finish being created even after we waited 187 seconds or 61 attempts. And its status is error.]</code>问题。</p><p>修改<code>nova.conf</code>，添加以下参数设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@cinder ~] <span class="comment"># vim /etc/nova/nova.conf</span></span><br><span class="line"></span><br><span class="line">block_device_allocate_retries=600</span><br><span class="line">block_device_allocate_retries_interval=5</span><br><span class="line">block_device_creation_timeout=600</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">[root@cinder ~] <span class="comment"># sudo systemctl restart devstack@*</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-修改卷组位置"><a href="#2-3-2-修改卷组位置" class="headerlink" title="2.3.2 修改卷组位置"></a>2.3.2 修改卷组位置</h4><p>修改OpenStack创建虚拟机时分配磁盘的位置。</p><ol><li><p>查看<code>/etc/cinder/cinder.conf</code>，搜索<code>volume_group</code>对应的值，默认为<code>stack-volumes-lvmdriver-1</code></p></li><li><p>输入命令<code>vgs</code>查看当前vg，删除不需要的vg， <code>vgremove ****</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stack@controller:/$ sudo vgs</span><br><span class="line">  VG                        <span class="comment">#PV #LV #SN Attr   VSize   VFree  </span></span><br><span class="line">  stack-volumes-default       1   0   0 wz--n- &lt;30.00g &lt;30.00g</span><br><span class="line">  stack-volumes-lvmdriver-1   1   1   0 wz--n- &lt;30.00g   1.43g</span><br><span class="line">  vgubuntu                    1   2   0 wz--n-   1.09t      0 </span><br><span class="line"></span><br><span class="line">stack@controller:/$ sudo vgremove stack-volumes-lvmdriver-1</span><br></pre></td></tr></table></figure></li><li><p>在对应的磁盘上创建vg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pvcreate /dev/sdc</span><br><span class="line">sudo vgcreate stack-volumes-lvmdriver-1 /dev/sdc</span><br></pre></td></tr></table></figure></li><li><p>重启服务，<code>sudo systemctl restart devstack@*</code></p></li></ol><h3 id="2-4-上传镜像"><a href="#2-4-上传镜像" class="headerlink" title="2.4 上传镜像"></a>2.4 上传镜像</h3><blockquote><p>修改镜像格式（qcow2转raw）</p><p>qemu-img convert -f qcow2  win7.qcow2 -O  raw win7.raw</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack image create <span class="string">&quot;ubuntu20-server&quot;</span> --file ubuntu20-server.qcow2 --disk-format qcow2 --container-format bare --public</span><br></pre></td></tr></table></figure><h3 id="2-5-在指定compute节点创建实例"><a href="#2-5-在指定compute节点创建实例" class="headerlink" title="2.5 在指定compute节点创建实例"></a>2.5 在指定compute节点创建实例</h3><ol><li>查看可用zone：<code>openstack availability zone list</code></li><li>查看可用host：<code>openstack host list</code></li><li>查看可用node：<code>openstack hypervisor list</code></li><li>查看网络：<code>openstack network list</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack server create --flavor ds1G --image ubuntu20-server --nic net-id=937ba92f-4f53-4da2-a1a6-6d4e1cf433bf --availability-zone nova:compute1:compute1 ubuntu1-1</span><br></pre></td></tr></table></figure><ul><li>–flavor：实例类型</li><li>–image：镜像</li><li>–nic：网络 net-id网络id 第4步查得</li><li>–availability-zone nova:compute1:compute1 前三步查得</li></ul><p>查看各计算节点的虚拟机</p><ul><li>nova list –host controller –all-tenants</li><li>nova list –host compute1 –all-tenants</li></ul><h3 id="2-6-修改虚拟机网络配置"><a href="#2-6-修改虚拟机网络配置" class="headerlink" title="2.6 修改虚拟机网络配置"></a>2.6 修改虚拟机网络配置</h3><p>创建实例后，可以分配<strong>浮动IP</strong>，从而可以从外部直接操作虚拟机。</p><h4 id="2-6-1-ubuntu20"><a href="#2-6-1-ubuntu20" class="headerlink" title="2.6.1 ubuntu20"></a>2.6.1 ubuntu20</h4><p>默认使用<code>netplan</code>管理网络配置，修改<code>/etc/netplan/****.yaml</code>，修改网卡名称，设置DHCP并添加DNS，否则无法通过域名访问外部网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改网络配置</span></span><br><span class="line">vim /etc/netplan/****.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件示例</span></span><br><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens3:</span><br><span class="line">      dhcp4: <span class="literal">true</span></span><br><span class="line">      nameservers:</span><br><span class="line">              addresses: [114.114.114.114,8.8.8.8]</span><br><span class="line">  version: 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使网络配置生效</span></span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h4 id="2-6-2-ubuntu16"><a href="#2-6-2-ubuntu16" class="headerlink" title="2.6.2 ubuntu16"></a>2.6.2 ubuntu16</h4><ul><li>在<code>/etc/network/interfaces.d/***.cfg</code>中添加DNS服务器，添加<code>dns-nameserver 114.114.114.114</code></li><li>生效：<code>sudo /etc/init.d/networking restart</code>，<code>sudo /etc/init.d/resolvconf restart</code></li><li><img src="https://s2.loli.net/2022/04/29/LNqmMKubnAgp32j.png" alt="ubuntu16网络配置"></li></ul><h3 id="2-7-修改网络安全组规则"><a href="#2-7-修改网络安全组规则" class="headerlink" title="2.7 修改网络安全组规则"></a>2.7 修改网络安全组规则</h3><p>默认安全组规则不允许从外部进行SSH操作与ping操作，因此需要开启22端口与ICMP规则，可以直接将ICMP、TCP、UDP的所有端口的出入口规则打开。</p><p><img src="https://s2.loli.net/2022/04/29/ZHIxRkA7EmdLrOS.png" alt="安全组规则"></p><h1 id="三、DevStack相关组件"><a href="#三、DevStack相关组件" class="headerlink" title="三、DevStack相关组件"></a>三、DevStack相关组件</h1><p>devstack相关组件均通过<code>systemctl</code>进行控制，其日志信息通过<code>journalctl</code>查看。</p><p>c-*是cinder，g-*是glance，n-*是nova，o-*是octavia，q-*是neutron。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/ | grep devstack | awk ‘&#123;<span class="built_in">print</span> <span class="variable">$9</span>&#125;’</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">devstack@c-api.service</span><br><span class="line">devstack@c-sch.service</span><br><span class="line">devstack@c-vol.service</span><br><span class="line">devstack@dstat.service</span><br><span class="line">devstack@etcd.service</span><br><span class="line">devstack@g-api.service</span><br><span class="line">devstack@keystone.service</span><br><span class="line">devstack@n-api-meta.service</span><br><span class="line">devstack@n-api.service</span><br><span class="line">devstack@n-cond-cell1.service</span><br><span class="line">devstack@n-cpu.service</span><br><span class="line">devstack@n-novnc-cell1.service</span><br><span class="line">devstack@n-sch.service</span><br><span class="line">devstack@n-super-cond.service</span><br><span class="line">devstack@placement-api.service</span><br><span class="line">devstack@q-agt.service</span><br><span class="line">devstack@q-dhcp.service</span><br><span class="line">devstack@q-l3.service</span><br><span class="line">devstack@q-meta.service</span><br><span class="line">devstack@q-svc.service</span><br></pre></td></tr></table></figure><h1 id="四、可能遇到的问题"><a href="#四、可能遇到的问题" class="headerlink" title="四、可能遇到的问题"></a>四、可能遇到的问题</h1><h3 id="1-Host-is-not-mapped-to-any-cell"><a href="#1-Host-is-not-mapped-to-any-cell" class="headerlink" title="1. Host is not mapped to any cell"></a>1. Host is not mapped to any cell</h3><p>在控制节点执行<code>nova-manage cell_v2 discover_hosts --verbose</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stack@controller:~$ nova-manage cell_v2 discover_hosts --verbose</span><br><span class="line">Found 2 cell mappings.</span><br><span class="line">Skipping cell0 since it does not contain hosts.</span><br><span class="line">Getting computes from cell <span class="string">&#x27;cell1&#x27;</span>: 9b2d95a4-22da-4af4-8313-66f4d2f74680</span><br><span class="line">Checking host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node01&#x27;</span>: b1cc044a-841b-41fa-bbe0-ad07045ff46d</span><br><span class="line">Creating host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node01&#x27;</span>: b1cc044a-841b-41fa-bbe0-ad07045ff46d</span><br><span class="line">Checking host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node02&#x27;</span>: c4894695-8adf-4243-bc7f-9c950c6f9491</span><br><span class="line">Creating host mapping <span class="keyword">for</span> compute host <span class="string">&#x27;h3c-node02&#x27;</span>: c4894695-8adf-4243-bc7f-9c950c6f9491</span><br><span class="line">Found 2 unmapped computes <span class="keyword">in</span> cell: 9b2d95a4-22da-4af4-8313-66f4d2f74680</span><br></pre></td></tr></table></figure><h3 id="2-创建实例超时"><a href="#2-创建实例超时" class="headerlink" title="2. 创建实例超时"></a>2. 创建实例超时</h3><p><code>[错误: Build of instance 6ec6e8b1-9300-4be4-95fe-20434ea041f5 aborted: Volume e3dcad3d-dd22-4947-99d8-b8d0ad4b1025 did not finish being created even after we waited 187 seconds or 61 attempts. And its status is error.]</code></p><p>修改<code>nove.conf</code>中的重复尝试次数。参考[2.3.1 nove.conf](#2.3.1 nova.conf)。</p><h3 id="3-执行指令有warning"><a href="#3-执行指令有warning" class="headerlink" title="3. 执行指令有warning"></a>3. 执行指令有warning</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/python3/dist-packages/secretstorage/dhcrypto.py:15: CryptographyDeprecationWarning: int_from_bytes is deprecated, use int.from_bytes instead</span><br><span class="line">  from cryptography.utils import int_from_bytes</span><br><span class="line">/usr/lib/python3/dist-packages/secretstorage/util.py:19: CryptographyDeprecationWarning: int_from_bytes is deprecated, use int.from_bytes instead</span><br><span class="line">  from cryptography.utils import int_from_bytes</span><br></pre></td></tr></table></figure><p>将<code>cryptography</code>版本降至3.4以下，<code>pip install cryptography==3.3.2</code></p><h3 id="4-无法在compute节点使用控制台"><a href="#4-无法在compute节点使用控制台" class="headerlink" title="4. 无法在compute节点使用控制台"></a>4. 无法在compute节点使用控制台</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error response</span><br><span class="line">Error code: 404</span><br><span class="line">Message: File not found.</span><br><span class="line">Error code explanation: HTTPStatus.NOT_FOUND - Nothing matches the given URI.</span><br></pre></td></tr></table></figure><ol><li><p>方法1：将<code>local.conf</code>的<code>NOVNCPROXY_URL=&quot;http://$SERVICE_HOST:6080/vnc_auto.html&quot;</code>改为<code>NOVNCPROXY_URL=&quot;http://$SERVICE_HOST:6080/vnc_lite.html&quot;</code>，但是需要重装该节点的openstack</p></li><li><p>方法2：将controller节点的<code>vnc_lite.html</code>复制为<code>vnc_auto.html</code>，&#x3D;&#x3D;推荐&#x3D;&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@controller:/opt/stack/noVNC<span class="comment"># cp vnc_lite.html vnc_auto.html</span></span><br></pre></td></tr></table></figure></li><li><p>方法3：修改nova的配置文件，&#x3D;&#x3D;该方法未验证&#x3D;&#x3D;</p></li></ol><h3 id="5-创建实例时报错，PortBindingFailed"><a href="#5-创建实例时报错，PortBindingFailed" class="headerlink" title="5. 创建实例时报错，PortBindingFailed"></a>5. 创建实例时报错，PortBindingFailed</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PortBindingFailed: Binding failed <span class="keyword">for</span> port 57ae0adc-89f9-41c6-afa7-cef5c19c6276, please check neutron logs <span class="keyword">for</span> more information</span><br></pre></td></tr></table></figure><p>在DashBoard的【管理员】-【系统】-【系统信息】-【网络代理】中发现对应的compute节点没有<code>Open vSwitch agent</code>，需要在<code>local.conf</code>中修改<code>ENABLED_SERVICES</code>参数，添加<code>q-agt</code>以启用该服务。需<strong>重新部署</strong>该节点的openstack。</p><p><img src="https://s2.loli.net/2022/04/29/CS7O8v4ZnXxwpsB.png" alt="Openstack系统信息"></p><h3 id="6-dpkg-error-processing-package-rabbitmq-server"><a href="#6-dpkg-error-processing-package-rabbitmq-server" class="headerlink" title="6. dpkg: error processing package rabbitmq-server"></a>6. <code>dpkg: error processing package rabbitmq-server</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Setting up rabbitmq-server (3.8.2-0ubuntu1.3) ...</span><br><span class="line">Job <span class="keyword">for</span> rabbitmq-server.service failed because the control process exited with error code.</span><br><span class="line">See <span class="string">&quot;systemctl status rabbitmq-server.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">invoke-rc.d: initscript rabbitmq-server, action <span class="string">&quot;start&quot;</span> failed.</span><br><span class="line">● rabbitmq-server.service - RabbitMQ Messaging Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: activating (auto-restart) (Result: exit-code) since Wed 2022-03-09 12:18:24 CST; 13ms ago</span><br><span class="line">    Process: 275639 ExecStart=/usr/sbin/rabbitmq-server (code=exited, status=1/FAILURE)</span><br><span class="line">   Main PID: 275639 (code=exited, status=1/FAILURE)</span><br><span class="line">dpkg: error processing package rabbitmq-server (--configure):</span><br><span class="line"> installed rabbitmq-server package post-installation script subprocess returned error <span class="built_in">exit</span> status 1</span><br><span class="line">Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line"> rabbitmq-server</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br><span class="line">**解决**：</span><br><span class="line"></span><br><span class="line">参考：[(1条消息) dpkg: error processing package *** (--configure)解决办法](https://blog.csdn.net/qq_36561697/article/details/82224279)</span><br><span class="line">sudo <span class="built_in">mv</span> /var/lib/dpkg/info/ /var/lib/dpkg/info_old/</span><br><span class="line">sudo <span class="built_in">mkdir</span> /var/lib/dpkg/info/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">sudo <span class="built_in">mv</span> /var/lib/dpkg/info/* /var/lib/dpkg/info_old/</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/dpkg/info</span><br><span class="line">sudo <span class="built_in">mv</span> /var/lib/dpkg/info_old/ /var/lib/dpkg/info/</span><br></pre></td></tr></table></figure><h3 id="7-rabbitmq-server-service无法启动"><a href="#7-rabbitmq-server-service无法启动" class="headerlink" title="7. rabbitmq-server.service无法启动"></a>7. <code>rabbitmq-server.service</code>无法启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stack@h3c-node03:~/devstack$ sudo systemctl status rabbitmq-server.service</span><br><span class="line">● rabbitmq-server.service - RabbitMQ Messaging Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: activating (start) since Wed 2022-03-09 12:27:29 CST; 403ms ago</span><br><span class="line">   Main PID: 287819 (rabbitmq-server)</span><br><span class="line">      Tasks: 149 (<span class="built_in">limit</span>: 304188)</span><br><span class="line">     Memory: 68.4M</span><br><span class="line">     CGroup: /system.slice/rabbitmq-server.service</span><br><span class="line">             ├─287819 /bin/sh /usr/sbin/rabbitmq-server</span><br><span class="line">             ├─287823 /bin/sh /usr/lib/rabbitmq/bin/rabbitmq-server</span><br><span class="line">             ├─287914 /usr/lib/erlang/erts-10.6.4/bin/beam.smp -- -root /usr/lib/erlang -progname erl -- -home /var/lib/rabbitmq -- -pa /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.2/ebin -boot start_clean -noshe&gt;</span><br><span class="line">             ├─287925 erl_child_setup 65536</span><br><span class="line">             ├─288068 inet_gethost 4</span><br><span class="line">             └─288069 inet_gethost 4</span><br><span class="line"></span><br><span class="line">3月 09 12:27:29 h3c-node03 systemd[1]: Starting RabbitMQ Messaging Server...</span><br><span class="line">解决：</span><br><span class="line"></span><br><span class="line">修改`/etc/hosts`，将`127.0.0.1  hostname`加进去</span><br></pre></td></tr></table></figure><h3 id="8-连接mysql提示命令行使用密码不安全"><a href="#8-连接mysql提示命令行使用密码不安全" class="headerlink" title="8. 连接mysql提示命令行使用密码不安全"></a>8. 连接mysql提示命令行使用密码不安全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">ERROR 1698 (28000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="9-die-if-not-set-215-NET-ID-39-Failure-creating-NET"><a href="#9-die-if-not-set-215-NET-ID-39-Failure-creating-NET" class="headerlink" title="9. die_if_not_set 215 NET_ID &#39;Failure creating NET"></a>9. <code>die_if_not_set 215 NET_ID &#39;Failure creating NET</code></h3><p>在<code>local.conf</code>添加ml2的VLAN配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q_PLUGIN=ml2</span><br><span class="line">ENABLE_TENANT_VLANS=True</span><br><span class="line">ML2_VLAN_RANGES=physnet1:1000:2000       <span class="comment"># physnet1 为物理网络名称</span></span><br><span class="line">重装，`./unstack.sh &amp;&amp; ./clean.sh &amp;&amp; ./stack.sh`，报错可多执行一次</span><br></pre></td></tr></table></figure><h3 id="10-The-user-clouds-yaml-file-didn’t-exist"><a href="#10-The-user-clouds-yaml-file-didn’t-exist" class="headerlink" title="10. The user clouds.yaml file didn’t exist."></a>10. The user clouds.yaml file didn’t exist.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">+functions-common:write_clouds_yaml:89     /usr/bin/python3.8 /home/stack/devstack/tools/update_clouds_yaml.py --file /etc/openstack/clouds.yaml --os-cloud devstack --os-region-name RegionOne --os-auth-url http://192.168.208.138/identity --os-username demo --os-password secret --os-project-name demo</span><br><span class="line">The user clouds.yaml file didn<span class="string">&#x27;t exist.</span></span><br><span class="line"><span class="string">+functions-common:write_clouds_yaml:100    /usr/bin/python3.8 /home/stack/devstack/tools/update_clouds_yaml.py --file /etc/openstack/clouds.yaml --os-cloud devstack-alt --os-region-name RegionOne --os-auth-url http://192.168.208.138/identity --os-username alt_demo --os-password secret --os-project-name alt_demo</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 108, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    main()</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 104, in main</span></span><br><span class="line"><span class="string">    update_clouds_yaml.run()</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 61, in run</span></span><br><span class="line"><span class="string">    self._read_clouds()</span></span><br><span class="line"><span class="string">  File &quot;/home/stack/devstack/tools/update_clouds_yaml.py&quot;, line 68, in _read_clouds</span></span><br><span class="line"><span class="string">    self._clouds = yaml.load(clouds_file)</span></span><br><span class="line"><span class="string">TypeError: load() missing 1 required positional argument: &#x27;</span>Loader<span class="string">&#x27;</span></span><br><span class="line"><span class="string">+functions-common:write_clouds_yaml:1      exit_trap</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:507                  local r=1</span></span><br><span class="line"><span class="string">++./stack.sh:exit_trap:508                  jobs -p</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:508                  jobs=</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:511                  [[ -n &#x27;</span><span class="string">&#x27; ]]</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:517                  &#x27;</span>[<span class="string">&#x27; -f /tmp/tmp.7EzmX9aLTV &#x27;</span>]<span class="string">&#x27;</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:518                  rm /tmp/tmp.7EzmX9aLTV</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:522                  kill_spinner</span></span><br><span class="line"><span class="string">+./stack.sh:kill_spinner:417               &#x27;</span>[<span class="string">&#x27; &#x27;</span>!<span class="string">&#x27; -z &#x27;</span><span class="string">&#x27; &#x27;</span>]<span class="string">&#x27;</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:524                  [[ 1 -ne 0 ]]</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:525                  echo &#x27;</span>Error on <span class="built_in">exit</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">Error on exit</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:527                  type -p generate-subunit</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:528                  generate-subunit 1646374392 324 fail</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:530                  [[ -z /opt/stack/logs ]]</span></span><br><span class="line"><span class="string">+./stack.sh:exit_trap:533                  /usr/bin/python3.8 /home/stack/devstack/tools/worlddump.py -d /opt/stack/logs</span></span><br><span class="line"><span class="string">World dumping... see /opt/stack/logs/worlddump-2022-03-04-061836.txt for details</span></span><br></pre></td></tr></table></figure><p>修改文件<code>/home/stack/devstack/tools/update_clouds_yaml.py</code>68行代码为<code>self._clouds = yaml.safe_load(clouds_file)</code></p><h3 id="11-创建实例时块设备映射失败"><a href="#11-创建实例时块设备映射失败" class="headerlink" title="11. 创建实例时块设备映射失败"></a>11. 创建实例时块设备映射失败</h3><p><img src="https://secure2.wostatic.cn/static/jKzHYXr1uCLC24SxegTTbf/image.png?auth_key=1668775602-d52CPGGN9SNPxNQU4RdV5f-0-c5d9937105e9ce712098e5258af855ff" alt="img"></p><p>缺少虚拟卷，创建虚拟卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sda</span><br><span class="line">参考：</span><br><span class="line"></span><br><span class="line">[cinder-volume服务状态为down 解决方法_weixin_34104341的博客-CSDN博客](https://blog.csdn.net/weixin_34104341/article/details/92968833)</span><br></pre></td></tr></table></figure><h3 id="12-创建实例超时（镜像太大时会出现）"><a href="#12-创建实例超时（镜像太大时会出现）" class="headerlink" title="12. 创建实例超时（镜像太大时会出现）"></a>12. 创建实例超时（镜像太大时会出现）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> [错误: Build of instance <span class="number">6</span>ec6e8b1<span class="number">-9300</span><span class="number">-4b</span>e4<span class="number">-95f</span>e<span class="number">-20434</span>ea041f5 aborted: Volume e3dcad3d-dd22<span class="number">-4947</span><span class="number">-99</span>d8-b8d0ad4b1025 did <span class="keyword">not</span> finish being created even after we waited <span class="number">187</span> seconds <span class="keyword">or</span> <span class="number">61</span> attempts. And its status is error.]</span><br><span class="line">注意，此时尝试次数为<span class="number">61</span>，因此判断配置文件的重试次数<span class="number">60</span>不够，只有<span class="number">2</span>、<span class="number">3</span>次的时候并不是这个原因</span><br><span class="line">[root@cinder ~]<span class="meta">#vim /etc/nova/nova.conf</span></span><br><span class="line">block_device_allocate_retries=<span class="number">600</span></span><br><span class="line">block_device_allocate_retries_interval=<span class="number">5</span></span><br><span class="line">block_device_creation_timeout=<span class="number">600</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.51cto.com/u_15301988/5134179">Devstack 多节点自动化部署</a></p><p><a href="https://blog.csdn.net/m0_49212388/article/details/107606727">ubuntu18.04下使用devstack安装openstack多节点的ussuri版本</a></p><p><a href="https://docs.openstack.org/watcher/latest/contributor/devstack.html">Set up a development environment via DevStack — Watcher 8.1.0.dev3 documentation (openstack.org)</a></p><p>[Openstack 实现技术分解 (1) 开发环境 — Devstack 部署案例详解](<a href="https://www.cnblogs.com/jmilkfan-fanguiju/p/10589838.html#:~:text=Devstack">https://www.cnblogs.com/jmilkfan-fanguiju/p/10589838.html#:~:text=Devstack</a> 多节点部署的本质就是使用不同的 localrc 配置文件%2C 在不同的节点上运行 Devstack,部署脚本. 但需要注意的是%2C Openstack 多节点部署不仅是将不同的项目部署到不同的节点之上%2C 我们更应理解为是将 Openstack 项目中的不同服务部署到不同的节点之上.)</p><p><a href="https://www.cnblogs.com/Streamr-letsgo/p/9002859.html">使用devstack&#x2F;pike部署多节点实验</a></p><p><a href="https://blog.csdn.net/weixin_34104341/article/details/92968833">cinder-volume服务状态为down</a></p><p><a href="https://www.cnblogs.com/CloudMan6/default.html?page=36">每天5分钟玩转OpenStack - CloudMan</a></p>]]></content>
    
    
    <summary type="html">本文采用 DevStack 部署 OpenStack（W版本），包含单节点部署与多节点部署。</summary>
    
    
    
    <category term="云计算" scheme="https://www.wangliang.ml/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="OpenStack" scheme="https://www.wangliang.ml/tags/OpenStack/"/>
    
    <category term="DevStack" scheme="https://www.wangliang.ml/tags/DevStack/"/>
    
  </entry>
  
</feed>
